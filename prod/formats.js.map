{"version":3,"sources":["../src/formats.js"],"names":["embedColor","formatQueryServers","list","richEmbed","Discord","RichEmbed","description","reduce","acc","curr","index","name","setTitle","setColor","setDescription","setFooter","formatQueryServerStatus","info","players","xServerQueryProps","remainingTime","teamScores","playerList","parseInt","numplayers","maxteams","xserverquery","remainingtime","minutes","seconds","timelimit","Object","keys","forEach","team","teamIndex","p","teamPlayers","teams","spec","length","addField","mapname","maxplayers","footerText","host","port","hostname","formatListGameTypes","guildName","title","sortedList","sort","a","b","body","i","maxPlayers"],"mappings":"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","sourcesContent":["import Discord from 'discord.js';\nimport {\n  getPlayerList,\n  getMinutesAndSeconds,\n  getTeamScores,\n  padNumberWithZeros,\n  getTeamIndex,\n} from './utils';\nimport { teams } from './constants';\n\nconst embedColor = '#11806A';\n\nexport const formatQueryServers = list => {\n  const richEmbed = new Discord.RichEmbed();\n\n  const description = list.reduce((acc, curr, index) => {\n    acc += `\\`${index + 1}\\`\\u00A0\\u00A0\\u00A0${curr.name}\\n`;\n    return acc;\n  }, '');\n\n  richEmbed.setTitle(`IP\\u00A0\\u00A0\\u00A0Name`);\n  richEmbed.setColor(embedColor);\n  richEmbed.setDescription(description || 'No game servers added yet');\n  richEmbed.setFooter('To query, type .q ip');\n  return richEmbed;\n};\n\nexport const formatQueryServerStatus = (info, players) => {\n  const richEmbed = new Discord.RichEmbed();\n\n  const xServerQueryProps = { remainingTime: null, teamScores: {} };\n  const playerList = getPlayerList(\n    players,\n    parseInt(info.numplayers) || 0,\n    !!info.maxteams\n  );\n\n  if (info.xserverquery) {\n    const { minutes, seconds } = getMinutesAndSeconds(\n      parseInt(info.remainingtime)\n    );\n    const teamScores = getTeamScores(info, info.maxteams);\n    xServerQueryProps.remainingTime = `${\n      (minutes === parseInt(info.timelimit) && seconds === 0) ||\n      minutes < parseInt(info.timelimit)\n        ? '**Remaining Time:**'\n        : '**Overtime**:'\n    } ${padNumberWithZeros(minutes)}:${padNumberWithZeros(seconds)} \\n`;\n    xServerQueryProps.teamScores = Object.keys(teamScores).reduce(\n      (acc, curr) => {\n        const index = getTeamIndex(curr);\n        acc[index] = ` • ${teamScores[curr]}`;\n        return acc;\n      },\n      []\n    );\n  }\n\n  Object.keys(playerList).forEach(team => {\n    const teamIndex = getTeamIndex(team);\n    const p = playerList[team];\n    const teamPlayers = p.reduce((acc, curr) => {\n      if (team == teams.spec) acc += curr + ' • ';\n      else acc += curr + ' ' + '\\n';\n      return acc;\n    }, '');\n\n    p.length > 0\n      ? richEmbed.addField(\n          team + (xServerQueryProps.teamScores[teamIndex] || ``),\n          teamPlayers,\n          team !== teams.spec\n        )\n      : '';\n  });\n\n  const description = `**Map:** ${info.mapname}\\n**Players:** ${\n    info.numplayers\n  }/${info.maxplayers}\\n${xServerQueryProps.remainingTime || ''}`;\n  const footerText = `unreal://${info.host}:${info.port}`;\n\n  richEmbed.setTitle(info.hostname);\n  richEmbed.setColor(embedColor);\n  richEmbed.setDescription(description);\n  richEmbed.setFooter(footerText);\n  return richEmbed;\n};\n\nexport const formatListGameTypes = (guildName, list) => {\n  const title = `Pugs available at **${guildName}**`;\n  const sortedList = list.sort((a, b) => b.players - a.players); // by number of joined players\n\n  const body = sortedList.reduce((acc, curr, i) => {\n    acc += `**${curr.name}** (${curr.players}/${curr.maxPlayers}) ${\n      i === list.length - 1 ? '' : ':small_blue_diamond:'\n    }`;\n    return acc;\n  }, ``);\n\n  return `${title}\\n${body}`;\n};\n"],"file":"formats.js"}