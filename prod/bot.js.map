{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","bBot","Client","disabledEvents","on","message","author","equals","user","content","startsWith","prefix","id","username","roles","member","serverId","channel","guild","substring","length","split","filter","Boolean","first","args","action","toLowerCase","foundCommand","commands","find","cmd","aliases","includes","console","log","handlers","key","send","Date","toUTCString","mongoose","connect","useNewUrlParser","poolSize","login","process","env","DISCORD_BOT_TOKEN"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;AAEAA,mBAAOC,MAAP;;AAEA,IAAMC,IAAI,GAAG,IAAIC,eAAJ,CAAW;AACtBC,EAAAA,cAAc,EAAE,CAAC,cAAD,EAAiB,gBAAjB,EAAmC,aAAnC;AADM,CAAX,CAAb;AAIAF,IAAI,CAACG,EAAL,CAAQ,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAmB,iBAAMC,OAAN;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBACbA,OAAO,CAACC,MAAR,CAAeC,MAAf,CAAsBN,IAAI,CAACO,IAA3B,CADa;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAEZH,OAAO,CAACI,OAAR,CAAgBC,UAAhB,CAA2BC,gBAA3B,CAFY;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,8BAIQN,OAAO,CAACC,MAJhB,EAITM,EAJS,mBAITA,EAJS,EAILC,QAJK,mBAILA,QAJK;AAKTC,YAAAA,KALS,GAKCT,OAAO,CAACU,MALT,CAKTD,KALS;AAQAE,YAAAA,QARA,GAUbX,OAVa,CAOfY,OAPe,CAQbC,KARa,CAQJN,EARI;AAAA,oCAWQP,OAAO,CAACI,OAAR,CACtBU,SADsB,CACZR,iBAAOS,MADK,EAEtBC,KAFsB,CAEhB,GAFgB,EAGtBC,MAHsB,CAGfC,OAHe,CAXR,4DAWVC,KAXU,8BAWAC,IAXA;AAeXC,YAAAA,MAfW,GAeFF,KAAK,IAAIA,KAAK,CAACG,WAAN,EAfP;AAiBXC,YAAAA,YAjBW,GAiBIC,mBAASC,IAAT,CAAc,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,OAAJ,CAAYC,QAAZ,CAAqBP,MAArB,CAAJ;AAAA,aAAjB,CAjBJ;;AAmBjB,gBAAIE,YAAJ,EAAkB;AAChBM,cAAAA,OAAO,CAACC,GAAR,CAAYC,oBAAZ;AACAF,cAAAA,OAAO,CAACC,GAAR,CAAYP,YAAY,CAACS,GAAzB;;AACAD,mCAASR,YAAY,CAACS,GAAtB,EAA2BhC,OAA3B,EAAoCoB,IAApC,EAA0C;AAAEb,gBAAAA,EAAE,EAAFA,EAAF;AAAMC,gBAAAA,QAAQ,EAARA,QAAN;AAAgBC,gBAAAA,KAAK,EAALA;AAAhB,eAA1C;AACD,aAJD,MAIO;AACLT,cAAAA,OAAO,CAACY,OAAR,CAAgBqB,IAAhB;AACD;;AAzBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAnB;;AAAA;AAAA;AAAA;AAAA;AA4BA;;;;;AAIArC,IAAI,CAACG,EAAL,CAAQ,OAAR,EAAiB,YAAM;AACrB8B,EAAAA,OAAO,CAACC,GAAR,kCAAsC,IAAII,IAAJ,GAAWC,WAAX,EAAtC;AACD,CAFD;;AAIA;AAAA;AAAA,wBAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAESC,qBAASC,OAAT,CAAiB,gCAAjB,EAAmD;AACvDC,YAAAA,eAAe,EAAE,IADsC;AAEvDC,YAAAA,QAAQ,EAAE;AAF6C,WAAnD,CAFT;;AAAA;AAMG3C,UAAAA,IAAI,CAAC4C,KAAL,CAAWC,OAAO,CAACC,GAAR,CAAYC,iBAAvB;AANH;AAAA;;AAAA;AAAA;AAAA;AAQGd,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAD","sourcesContent":["import '@babel/polyfill';\nimport { Client } from 'discord.js';\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\nimport store from './store';\nimport { prefix, commands } from './contants';\nimport handlers from './commands';\n\ndotenv.config();\n\nconst bBot = new Client({\n  disabledEvents: ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'],\n});\n\nbBot.on('message', async message => {\n  if (message.author.equals(bBot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { id, username } = message.author;\n  const { roles } = message.member;\n  const {\n    channel: {\n      guild: { id: serverId },\n    },\n  } = message;\n  const [first, ...args] = message.content\n    .substring(prefix.length)\n    .split(' ')\n    .filter(Boolean);\n  const action = first && first.toLowerCase();\n\n  const foundCommand = commands.find(cmd => cmd.aliases.includes(action));\n\n  if (foundCommand) {\n    console.log(handlers);\n    console.log(foundCommand.key);\n    handlers[foundCommand.key](message, args, { id, username, roles });\n  } else {\n    message.channel.send(`Command not found`);\n  }\n});\n\n/*\n * BOT\n *  INITIALIZATION\n */\nbBot.on('ready', () => {\n  console.log(`Bot started running at ${new Date().toUTCString()}`);\n});\n\n(async () => {\n  try {\n    await mongoose.connect('mongodb://localhost:27017/bBot', {\n      useNewUrlParser: true,\n      poolSize: 5,\n    });\n    bBot.login(process.env.DISCORD_BOT_TOKEN);\n  } catch (error) {\n    console.log('error', error);\n  }\n})();\n"],"file":"bot.js"}