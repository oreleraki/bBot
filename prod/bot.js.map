{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","bBot","Client","disabledEvents","onMessage","message","author","equals","user","content","startsWith","prefix","id","username","roles","member","isInvisible","presence","status","serverId","guild","hasUserMention","mentions","users","first","mentionedUser","substring","length","split","filter","Boolean","args","action","toLowerCase","soloType","offline","foundCommand","commands","find","cmd","aliases","includes","solo","handlers","key","on","console","log","Date","toUTCString","_","state","store","getState","pugs","list","pugChannel","i","pug","isInPug","findPlayer","channel","channels","get","Message","User","bot","attachments","Map","embeds","mongoose","connect","useNewUrlParser","poolSize","useFindAndModify","hydrateStore","login","process","env","DISCORD_BOT_TOKEN","Promise","all","DiscordServers","exec","UT99QueryServers","GameTypes","Blocks","dServers","qServers","gameTypes","blocks","forEach","server_id","pug_channel","query_channel","dispatch","queryChannel","query_servers","Array","from","game_types","blocked_users","blockedUsers","emitters","pugEventEmitter","pugEvents","captainsReady","name","p","send"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\nimport dotenv from 'dotenv';\nimport mongoose from 'mongoose';\nimport { Client, User, Message } from 'discord.js';\nimport store from './store';\nimport {\n  INIT,\n  setQueryChannel,\n  setPugChannel,\n  assignQueryServers,\n  assignGameTypes,\n  assignBlocks,\n} from './store/actions';\nimport { DiscordServers, UT99QueryServers, GameTypes, Blocks } from './models';\nimport { handlers, commands, emitters } from './commands';\nimport { sanitizeName } from './utils';\nimport { prefix, offline, pugEvents } from './constants';\nimport { formatBroadcastCaptainsReady } from './formats';\n\ndotenv.config();\n\nconst bBot = new Client({\n  disabledEvents: ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'],\n});\n\nasync function onMessage(message) {\n  if (message.author.equals(bBot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { id, username } = message.author;\n  const roles = message.member ? message.member.roles : null;\n  const isInvisible = message.author.presence.status === 'offline';\n\n  const {\n    guild: { id: serverId },\n  } = message;\n\n  if (!serverId) return;\n\n  const hasUserMention = message.mentions.users.first();\n  const mentionedUser = hasUserMention\n    ? { id: hasUserMention.id, username: sanitizeName(hasUserMention.username) }\n    : null;\n\n  const [first, ...args] = message.content\n    .substring(prefix.length)\n    .split(' ')\n    .filter(Boolean);\n  const action = first && first.toLowerCase();\n  const soloType = args[0] === offline || args.length === 0 ? 1 : 0;\n\n  const foundCommand = commands.find(\n    cmd =>\n      cmd.aliases.includes(action) && (cmd.solo === soloType || cmd.solo === 2)\n  );\n\n  if (foundCommand) {\n    return handlers[foundCommand.key](message, args, serverId, {\n      id,\n      roles,\n      username: sanitizeName(username),\n      mentionedUser,\n      isInvisible,\n      action,\n    });\n  }\n  // message.channel.send(`Command not found`);\n}\n\n/*\n * BOT\n *  EVENTS\n */\n\nbBot.on('ready', () => {\n  console.log(`Bot started running at ${new Date().toUTCString()}`);\n});\n\nbBot.on('message', onMessage);\n\nbBot.on('presenceUpdate', (_, { user, guild, presence: { status } }) => {\n  if (status === 'offline') {\n    const state = store.getState();\n    const { list = [], pugChannel } = state.pugs[guild.id] || {};\n    for (let i = 0; i < list.length; i++) {\n      const pug = list[i];\n      const isInPug = pug.findPlayer(user);\n\n      if (isInPug) {\n        const channel = guild.channels.get(pugChannel);\n        const message = new Message(\n          channel,\n          {\n            author: new User(bBot, {\n              bot: false,\n              id: user.id,\n              username: user.username,\n            }),\n            attachments: new Map(),\n            embeds: [],\n            content: 'lva',\n          },\n          bBot\n        );\n        handlers['leaveAllGameTypes'](message, [offline], guild.id, {\n          id: user.id,\n          username: sanitizeName(user.username),\n        });\n        break;\n      }\n    }\n  }\n});\n\n(async () => {\n  try {\n    await mongoose.connect('mongodb://localhost:27017/bBot', {\n      useNewUrlParser: true,\n      poolSize: 5,\n      useFindAndModify: false,\n    });\n    await hydrateStore();\n    bBot.login(process.env.DISCORD_BOT_TOKEN);\n  } catch (error) {\n    console.log('error', error);\n  }\n})();\n\nconst hydrateStore = async () => {\n  const [dServers, qServers, gameTypes, blocks] = await Promise.all([\n    DiscordServers.find({}).exec(),\n    UT99QueryServers.find({}).exec(),\n    GameTypes.find({}).exec(),\n    Blocks.find({}).exec(),\n  ]);\n\n  dServers.forEach(({ server_id, pug_channel, query_channel }) => {\n    store.dispatch(INIT({ serverId: server_id }));\n    store.dispatch(\n      setPugChannel({\n        serverId: server_id,\n        pugChannel: pug_channel,\n      })\n    );\n    store.dispatch(\n      setQueryChannel({ serverId: server_id, queryChannel: query_channel })\n    );\n  });\n\n  qServers.forEach(({ server_id, query_servers }) => {\n    store.dispatch(\n      assignQueryServers({\n        serverId: server_id,\n        list: Array.from(query_servers),\n      })\n    );\n  });\n\n  gameTypes.forEach(({ server_id, game_types }) => {\n    store.dispatch(\n      assignGameTypes({\n        serverId: server_id,\n        gameTypes: Array.from(game_types),\n      })\n    );\n  });\n\n  blocks.forEach(({ server_id, blocked_users }) => {\n    store.dispatch(\n      assignBlocks({\n        serverId: server_id,\n        blockedUsers: Array.from(blocked_users),\n      })\n    );\n  });\n};\n\n/**\n * P U G\n * E V E N T S\n */\nemitters.pugEventEmitter.on(pugEvents.captainsReady, (serverId, name) => {\n  const state = store.getState();\n  const { pugChannel, list } = state.pugs[serverId];\n  const pug = list.find(p => p.name === name);\n\n  bBot.channels.get(pugChannel).send(formatBroadcastCaptainsReady(pug));\n});\n"],"file":"bot.js"}