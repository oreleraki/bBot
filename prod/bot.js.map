{"version":3,"sources":["../src/bot.js"],"names":["dotenv","config","bBot","Client","disabledEvents","onMessage","message","author","equals","user","content","startsWith","prefix","id","username","roles","member","serverId","guild","substring","length","split","filter","Boolean","first","args","action","toLowerCase","isSolo","offline","foundCommand","commands","find","cmd","solo","aliases","includes","handlers","key","channel","send","on","console","log","Date","toUTCString","_","status","presence","state","store","getState","pugs","list","pugChannel","i","pug","isInPug","findPlayer","channels","get","Message","User","bot","attachments","Map","embeds","mongoose","connect","useNewUrlParser","poolSize","useFindAndModify","hydrateStore","login","process","env","DISCORD_BOT_TOKEN","DiscordServers","exec","dServers","UT99QueryServers","qServers","GameTypes","gameTypes","forEach","server_id","pug_channel","query_channel","dispatch","queryChannel","query_servers","Array","from","game_types"],"mappings":"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","sourcesContent":["import '@babel/polyfill';\nimport dotenv from 'dotenv';\nimport mongoose from 'mongoose';\nimport { Client, User, Message, GuildMember } from 'discord.js';\nimport store from './store';\nimport {\n  INIT,\n  setQueryChannel,\n  setPugChannel,\n  assignQueryServers,\n  assignGameTypes,\n} from './store/actions';\nimport { DiscordServers, UT99QueryServers, GameTypes } from './models';\nimport { handlers, commands } from './commands';\nimport { sanitizeName } from './utils';\nimport { prefix, offline } from './constants';\n\ndotenv.config();\n\nconst bBot = new Client({\n  disabledEvents: ['TYPING_START', 'CHANNEL_UPDATE', 'USER_UPDATE'],\n});\n\nasync function onMessage(message) {\n  if (message.author.equals(bBot.user)) return;\n  if (!message.content.startsWith(prefix)) return;\n\n  const { id, username } = message.author;\n  const roles = message.member ? message.member.roles : null;\n\n  const {\n    guild: { id: serverId },\n  } = message;\n\n  if (!serverId) return;\n\n  const [first, ...args] = message.content\n    .substring(prefix.length)\n    .split(' ')\n    .filter(Boolean);\n  const action = first && first.toLowerCase();\n  const isSolo = args[0] === offline || args.length === 0;\n\n  const foundCommand = commands.find(\n    cmd => cmd.solo === isSolo && cmd.aliases.includes(action)\n  );\n\n  if (foundCommand) {\n    return handlers[foundCommand.key](message, args, serverId, {\n      id,\n      roles,\n      username: sanitizeName(username),\n    });\n  }\n  message.channel.send(`Command not found`);\n}\n\n/*\n * BOT\n *  EVENTS\n */\n\nbBot.on('ready', () => {\n  console.log(`Bot started running at ${new Date().toUTCString()}`);\n});\n\nbBot.on('message', onMessage);\n\nbBot.on('presenceUpdate', (_, { user, guild, presence: { status } }) => {\n  if (status === 'offline') {\n    const state = store.getState();\n    const { list = [], pugChannel } = state.pugs[guild.id];\n    for (let i = 0; i < list.length; i++) {\n      const pug = list[i];\n      const isInPug = pug.findPlayer(user);\n\n      if (isInPug) {\n        const channel = guild.channels.get(pugChannel);\n        const message = new Message(\n          channel,\n          {\n            author: new User(bBot, {\n              bot: false,\n              id: user.id,\n              username: user.username,\n            }),\n            attachments: new Map(),\n            embeds: [],\n            content: 'lva',\n          },\n          bBot\n        );\n        handlers['leaveAllGameTypes'](message, [offline], guild.id, {\n          id: user.id,\n          username: sanitizeName(user.username),\n        });\n        break;\n      }\n    }\n  }\n});\n\n(async () => {\n  try {\n    await mongoose.connect('mongodb://localhost:27017/bBot', {\n      useNewUrlParser: true,\n      poolSize: 5,\n      useFindAndModify: false,\n    });\n    await hydrateStore();\n    bBot.login(process.env.DISCORD_BOT_TOKEN);\n  } catch (error) {\n    console.log('error', error);\n  }\n})();\n\nconst hydrateStore = async () => {\n  const dServers = await DiscordServers.find({}).exec();\n  const qServers = await UT99QueryServers.find({}).exec();\n  const gameTypes = await GameTypes.find({}).exec();\n\n  dServers.forEach(({ server_id, pug_channel, query_channel }) => {\n    store.dispatch(INIT({ serverId: server_id }));\n    store.dispatch(\n      setPugChannel({\n        serverId: server_id,\n        pugChannel: pug_channel,\n      })\n    );\n    store.dispatch(\n      setQueryChannel({ serverId: server_id, queryChannel: query_channel })\n    );\n  });\n\n  qServers.forEach(({ server_id, query_servers }) => {\n    store.dispatch(\n      assignQueryServers({\n        serverId: server_id,\n        list: Array.from(query_servers),\n      })\n    );\n  });\n\n  gameTypes.forEach(({ server_id, game_types }) => {\n    store.dispatch(\n      assignGameTypes({\n        serverId: server_id,\n        gameTypes: Array.from(game_types),\n      })\n    );\n  });\n};\n"],"file":"bot.js"}