{"version":3,"sources":["../src/utils.js"],"names":["hasPrivilegedRole","privilegedRoles","userRoles","some","pr","find","ur","name","getPlayerList","players","noOfPlayers","noOfTeams","playerList","teams","team_0","team_1","team_2","team_3","team_255","spec","i","playerFlag","player","sanitizeName","push","team","parseInt","Object","values","createAlternatingObject","array","reduce","acc","item","arr","toLowerCase","replace","c","getMinutesAndSeconds","time","seconds","minutes","padNumberWithZeros","number","getTeamScores","info","maxTeams","teamScores","getTeamIndex","teamName","findIndex","t"],"mappings":";;;;;;;AAAA;;;;AAEO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,eAAD,EAAkBC,SAAlB;AAAA,SAC/BD,eAAe,CAACE,IAAhB,CAAqB,UAAAC,EAAE;AAAA,WAAIF,SAAS,CAACG,IAAV,CAAe,UAAAC,EAAE;AAAA,aAAIA,EAAE,CAACC,IAAH,KAAYH,EAAhB;AAAA,KAAjB,CAAJ;AAAA,GAAvB,CAD+B;AAAA,CAA1B;AAGP;;;;;;;;;AAKO,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAUC,WAAV,EAAuBC,SAAvB,EAAqC;AAAA;;AAChE,MAAMC,UAAU,mDACbC,iBAAMC,MADO,EACE,EADF,gCAEbD,iBAAME,MAFO,EAEE,EAFF,gCAGbF,iBAAMG,MAHO,EAGE,EAHF,gCAIbH,iBAAMI,MAJO,EAIE,EAJF,gCAKbJ,iBAAMK,QALO,EAKI,EALJ,gCAMbL,iBAAMM,IANO,EAMA,EANA,eAAhB;;AASA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,WAApB,EAAiCU,CAAC,EAAlC,EAAsC;AACpC,QAAMC,UAAU,GACdZ,OAAO,oBAAaW,CAAb,EAAP,IAA4BX,OAAO,oBAAaW,CAAb,EAAP,KAA6B,MAAzD,mBACaX,OAAO,oBAAaW,CAAb,EADpB,uBADF;AAKA,QAAME,MAAM,aAAMD,UAAN,cAAoBE,YAAY,CAACd,OAAO,kBAAWW,CAAX,EAAR,CAAhC,CAAZ;;AACA,QAAIX,OAAO,gBAASW,CAAT,EAAP,KAAyB,WAA7B,EAA0C;AACxCR,MAAAA,UAAU,CAACC,iBAAMM,IAAP,CAAV,CAAuBK,IAAvB,CAA4BF,MAA5B;;AACA;AACD;;AAED,QAAIX,SAAS,GAAG,CAAhB,EAAmB;AACjB,UAAMc,IAAI,GAAGC,QAAQ,CAACjB,OAAO,gBAASW,CAAT,EAAR,CAArB,CADiB,CAC4B;;AAC7CR,MAAAA,UAAU,CAACe,MAAM,CAACC,MAAP,CAAcf,gBAAd,EAAqBY,IAArB,CAAD,CAAV,CAAuCD,IAAvC,CAA4CF,MAA5C;AACD,KAHD,MAGO;AACLV,MAAAA,UAAU,CAACC,iBAAMK,QAAP,CAAV,CAA2BM,IAA3B,CAAgCF,MAAhC;AACD;AACF;;AACD,SAAOV,UAAP;AACD,CA9BM;AAgCP;;;;;;;;;AAKO,IAAMiB,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,KAAK;AAAA,SAC1CA,KAAK,CAACC,MAAN,CAAa,UAACC,GAAD,EAAMC,IAAN,EAAYb,CAAZ,EAAec,GAAf,EAAuB;AAClC,QAAId,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiBY,GAAG,CAACC,IAAI,CAACE,WAAL,EAAD,CAAH,GAA0BD,GAAG,CAACd,CAAC,GAAG,CAAL,CAA7B;AACjB,WAAOY,GAAP;AACD,GAHD,EAGG,EAHH,CAD0C;AAAA,CAArC;AAMP;;;;;;;;;AAKO,IAAMT,YAAY,GAAG,SAAfA,YAAe,CAAAhB,IAAI;AAAA,SAAIA,IAAI,CAAC6B,OAAL,CAAa,WAAb,EAA0B,UAAAC,CAAC;AAAA,WAAI,OAAOA,CAAX;AAAA,GAA3B,CAAJ;AAAA,CAAzB;AAEP;;;;;;;;;AAKO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAAAC,IAAI,EAAI;AAC1C,MAAMC,OAAO,GAAGD,IAAI,GAAG,EAAvB;AACA,MAAME,OAAO,GAAG,CAACF,IAAI,GAAGC,OAAR,IAAmB,EAAnC;AACA,SAAO;AAAEA,IAAAA,OAAO,EAAPA,OAAF;AAAWC,IAAAA,OAAO,EAAPA;AAAX,GAAP;AACD,CAJM;AAMP;;;;;;;;;AAKO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,MAAM;AAAA,SACtCA,MAAM,GAAG,CAAC,CAAV,IAAeA,MAAM,GAAG,EAAxB,cAAiCA,MAAjC,cAA+CA,MAA/C,CADsC;AAAA,CAAjC;AAGP;;;;;;;;;;AAMO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAOC,QAAP,EAAoB;AAAA;;AAC/C,MAAMC,UAAU,mDACblC,iBAAMC,MADO,EACE,IADF,gCAEbD,iBAAME,MAFO,EAEE,IAFF,gCAGbF,iBAAMG,MAHO,EAGE,IAHF,gCAIbH,iBAAMI,MAJO,EAIE,IAJF,eAAhB;;AAOA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0B,QAApB,EAA8B1B,CAAC,EAA/B,EAAmC;AACjC2B,IAAAA,UAAU,CAACpB,MAAM,CAACC,MAAP,CAAcf,gBAAd,EAAqBO,CAArB,CAAD,CAAV,GAAsCyB,IAAI,qBAAczB,CAAd,EAA1C;AACD;;AACD,SAAO2B,UAAP;AACD,CAZM;AAcP;;;;;;;;;AAKO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,QAAQ;AAAA,SAClCtB,MAAM,CAACC,MAAP,CAAcf,gBAAd,EAAqBqC,SAArB,CAA+B,UAAAC,CAAC;AAAA,WAAIA,CAAC,KAAKF,QAAV;AAAA,GAAhC,CADkC;AAAA,CAA7B","sourcesContent":["import { teams } from './constants';\n\nexport const hasPrivilegedRole = (privilegedRoles, userRoles) =>\n  privilegedRoles.some(pr => userRoles.find(ur => ur.name === pr));\n\n/**\n * @param {Object} players\n * @param {Number} noOfPlayers\n * @param {Number} noOfTeams\n */\nexport const getPlayerList = (players, noOfPlayers, noOfTeams) => {\n  const playerList = {\n    [teams.team_0]: [],\n    [teams.team_1]: [],\n    [teams.team_2]: [],\n    [teams.team_3]: [],\n    [teams.team_255]: [],\n    [teams.spec]: [],\n  };\n\n  for (let i = 0; i < noOfPlayers; i++) {\n    const playerFlag =\n      players[`countryc_${i}`] && players[`countryc_${i}`] !== 'none'\n        ? `:flag_${players[`countryc_${i}`]}:`\n        : `:flag_white:`;\n\n    const player = `${playerFlag} ${sanitizeName(players[`player_${i}`])}`;\n    if (players[`mesh_${i}`] === 'Spectator') {\n      playerList[teams.spec].push(player);\n      continue;\n    }\n\n    if (noOfTeams > 0) {\n      const team = parseInt(players[`team_${i}`]); // returns an index for the team\n      playerList[Object.values(teams)[team]].push(player);\n    } else {\n      playerList[teams.team_255].push(player);\n    }\n  }\n  return playerList;\n};\n\n/**\n * @param {Array} array\n * @description Creates a new object with the even index as key and odd index as the value\n * @returns {Object}\n */\nexport const createAlternatingObject = array =>\n  array.reduce((acc, item, i, arr) => {\n    if (i % 2 === 0) acc[item.toLowerCase()] = arr[i + 1];\n    return acc;\n  }, {});\n\n/**\n * @param {String} name\n * @description Escapes special characters in the name\n * @returns {String}\n */\nexport const sanitizeName = name => name.replace(/(\\*|`|:)/g, c => `\\\\` + c);\n\n/**\n * @param {Number} time\n * @description Gives minutes and seconds\n * @returns {Object}\n */\nexport const getMinutesAndSeconds = time => {\n  const seconds = time % 60;\n  const minutes = (time - seconds) / 60;\n  return { seconds, minutes };\n};\n\n/**\n * @param {Number} number\n * @description padded with zero(s)\n * @returns {String}\n */\nexport const padNumberWithZeros = number =>\n  number > -1 && number < 10 ? `0${number}` : `${number}`;\n\n/**\n * @param {Object} info\n * @param {Number} maxTeams\n * @description Gives the respective scores for all teams\n * @returns {Object}\n */\nexport const getTeamScores = (info, maxTeams) => {\n  const teamScores = {\n    [teams.team_0]: null,\n    [teams.team_1]: null,\n    [teams.team_2]: null,\n    [teams.team_3]: null,\n  };\n\n  for (let i = 0; i < maxTeams; i++) {\n    teamScores[Object.values(teams)[i]] = info[`teamscore_${i}`];\n  }\n  return teamScores;\n};\n\n/**\n * @param {String} teamName\n * @description Returns the index for the team\n * @returns {Number}\n */\nexport const getTeamIndex = teamName =>\n  Object.values(teams).findIndex(t => t === teamName);\n"],"file":"utils.js"}