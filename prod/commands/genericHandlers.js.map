{"version":3,"sources":["../../src/commands/genericHandlers.js"],"names":["registerServer","message","_","serverId","__","DiscordServers","findOne","server_id","exec","res","channel","send","save","setQueryChannel","findOneAndUpdate","query_channel","id","store","dispatch","type","payload","queryChannel","console","log","getState","setPugChannel","pug_channel","pugChannel"],"mappings":"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","sourcesContent":["import DiscordServers from '../models/discordServers';\nimport store from '../store';\n\nexport const registerServer = async (message, _, serverId, __) => {\n  try {\n    const res = await DiscordServers.findOne({\n      server_id: serverId,\n    }).exec();\n\n    if (res)\n      return message.channel.send(\n        'Server is already registered with bBot :wink:'\n      );\n\n    await new DiscordServers({ server_id: serverId }).save();\n    message.channel.send('Server registered with bBot!');\n  } catch (err) {\n    message.channel.send(\n      'Something went wrong. The developer of this bot has been notified '\n    );\n  }\n};\n\nexport const setQueryChannel = async (message, _, serverId, __) => {\n  try {\n    const res = await DiscordServers.findOne({\n      server_id: serverId,\n    }).exec();\n\n    if (!res)\n      return message.channel.send(\n        'Please register the server with the bot! Type .register'\n      );\n\n    await DiscordServers.findOneAndUpdate(\n      { server_id: serverId },\n      { query_channel: message.channel.id }\n    ).exec();\n\n    store.dispatch({\n      type: 'INIT',\n      payload: { serverId, queryChannel: message.channel.id },\n    });\n\n    console.log(store.getState());\n    message.channel.send(\n      `<#${message.channel.id}> has been set as the query channel`\n    );\n  } catch (error) {\n    console.log(error);\n    message.channel.send(\n      'Something went wrong. The developer of this bot has been notified '\n    );\n  }\n};\n\nexport const setPugChannel = async (message, _, serverId, __) => {\n  try {\n    const res = await DiscordServers.findOne({\n      server_id: serverId,\n    }).exec();\n\n    if (!res)\n      return message.channel.send(\n        'Please register the server with the bot! Type .register'\n      );\n\n    await DiscordServers.findOneAndUpdate(\n      { server_id: serverId },\n      { pug_channel: message.channel.id }\n    ).exec();\n\n    store.dispatch({\n      type: 'INIT',\n      payload: { serverId, pugChannel: message.channel.id },\n    });\n\n    console.log(store.getState());\n    message.channel.send(\n      `<#${message.channel.id}> has been set as the pug channel`\n    );\n  } catch (error) {\n    console.log(error);\n    message.channel.send(\n      'Something went wrong. The developer of this bot has been notified '\n    );\n  }\n};\n"],"file":"genericHandlers.js"}