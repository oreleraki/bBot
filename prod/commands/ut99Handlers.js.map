{"version":3,"sources":["../../src/commands/ut99Handlers.js"],"names":["servers","_","serverId","__","channel","state","store","getState","queryServers","queryChannel","list","id","send","sortedList","sort","a","b","timestamp","console","log","addQueryServer","hp","rest","roles","privilegedRoles","split","host","port","name","reduce","acc","curr","key","crypto","createHash","update","digest","some","s","newServer","Date","now","UT99QueryServers","findOneAndUpdate","server_id","$push","query_servers","exec","dispatch","queryServer","delQueryServer","which","index","parseInt","updatedList","filter","i","queryUT99Server","arg","API","response","splitted","final","shift","unshift","hasPlayersNow","players","push","info","formattedResponse"],"mappings":"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","sourcesContent":["import store from '../store';\nimport crypto from 'crypto';\nimport { UT99QueryServers } from '../models';\nimport { pushQueryServer, removeQueryServer } from '../store/actions';\nimport { privilegedRoles } from '../constants';\nimport { hasPrivilegedRole, createAlternatingObject } from '../utils';\nimport { formatQueryServers, formatQueryServerStatus } from '../formats';\nimport API from '../services/API';\n\nexport const servers = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { queryChannel, list } = state.queryServers[serverId];\n\n    if (queryChannel !== channel.id)\n      return channel.send(\n        `Active channel for querying is ${\n          queryChannel ? `<#${queryChannel}>` : `is not present`\n        }`\n      );\n\n    const sortedList = list.sort((a, b) => a.timestamp - b.timestamp);\n    channel.send(formatQueryServers(sortedList));\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const addQueryServer = async (\n  { channel },\n  [hp, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    const state = store.getState();\n    const { list = [] } = state.queryServers[serverId];\n\n    const [host, port] = hp.split(':');\n    const name = rest.reduce((acc, curr) => (acc += curr + ' '), '');\n\n    if (!host || !port || !name) return channel.send('Invalid command');\n\n    const key = crypto\n      .createHash('sha256')\n      .update(hp)\n      .digest('hex');\n\n    if (list.some(s => s.key === key))\n      return channel.send('Query Server already exists!');\n\n    const newServer = {\n      key,\n      name,\n      host,\n      port,\n      timestamp: Date.now(),\n    };\n\n    await UT99QueryServers.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { query_servers: newServer } }\n    ).exec();\n\n    store.dispatch(pushQueryServer({ serverId, queryServer: newServer }));\n    channel.send('Query Server added');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const delQueryServer = async (\n  { channel },\n  [which, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    const state = store.getState();\n    const { list = [] } = state.queryServers[serverId];\n\n    const index = parseInt(which) - 1;\n    const sortedList = list.sort((a, b) => a.timestamp - b.timestamp);\n\n    if (!sortedList[index]) return channel.send('Query Server not found!');\n\n    const updatedList = sortedList.filter((_, i) => i !== index);\n\n    await UT99QueryServers.findOneAndUpdate(\n      { server_id: serverId },\n      { query_servers: updatedList }\n    ).exec();\n\n    store.dispatch(removeQueryServer({ serverId, index: index }));\n    channel.send('Query Server removed');\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const queryUT99Server = async (\n  { channel },\n  [arg, ...rest],\n  serverId,\n  _\n) => {\n  try {\n    const state = store.getState();\n    const { queryChannel, list = [] } = state.queryServers[serverId];\n\n    if (queryChannel !== channel.id)\n      return channel.send(\n        `Active channel for querying is ${\n          queryChannel ? `<#${queryChannel}>` : `is not present`\n        }`\n      );\n\n    const sortedList = list.sort((a, b) => a.timestamp - b.timestamp);\n    const { host, port = 7777 } =\n      sortedList[parseInt(arg) - 1] ||\n      arg.split(':').reduce((acc, curr, i) => {\n        i === 0 ? (acc['host'] = curr) : (acc['port'] = curr);\n        return acc;\n      }, {});\n\n    if (!host) return channel.send('Invalid query');\n\n    const response = await API.queryUT99Server(host, parseInt(port) + 1); // UDP port is +1\n    const splitted = response.split('\\\\');\n    const final = [...splitted];\n    final.shift();\n    final.unshift();\n\n    const { info, players } = final.reduce(\n      (acc, curr) => {\n        if (curr === 'player_0' || curr === 'Player_0')\n          acc.hasPlayersNow = true;\n\n        acc.hasPlayersNow ? acc.players.push(curr) : acc.info.push(curr);\n        return acc;\n      },\n      {\n        info: [],\n        players: [],\n        hasPlayersNow: false,\n      }\n    );\n\n    const formattedResponse = formatQueryServerStatus(\n      { ...createAlternatingObject(info), host, port },\n      createAlternatingObject(players)\n    );\n\n    channel.send(formattedResponse);\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"file":"ut99Handlers.js"}