{"version":3,"sources":["../../src/commands/ut99Handlers.js"],"names":["servers","_","serverId","__","channel","state","store","getState","queryServers","queryChannel","id","send","addQueryServer","hp","rest","split","host","port","name","reduce","acc","curr","key","crypto","createHash","update","digest","some","s","newServer","server_id","timestamp","Date","now","UT99QueryServers","findOneAndUpdate","$push","query_servers","exec","console","log"],"mappings":"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","sourcesContent":["import store from '../store';\nimport crypto from 'crypto';\nimport { UT99QueryServers } from '../models';\n\nexport const servers = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { queryChannel, ...queryServers } = state.queryServers[serverId];\n\n    if (queryChannel !== channel.id)\n      return channel.send(`Active channel for querying is <#${queryChannel}>`);\n  } catch (error) {}\n};\n\nexport const addQueryServer = async (\n  { channel },\n  [hp, ...rest],\n  serverId,\n  __\n) => {\n  try {\n    const state = store.getState();\n    const { queryChannel, ...queryServers } = state.queryServers[serverId];\n    const [host, port] = hp.split(':');\n    const name = rest.reduce((acc, curr) => (acc += curr + ' '), '');\n\n    if (!host || !port || !name) return channel.send('Invalid command');\n\n    const key = crypto\n      .createHash('sha256')\n      .update(hp)\n      .digest('hex');\n\n    if (queryServers.some(s => s.key === key))\n      return channel.send('Query Server already exists!');\n\n    const newServer = {\n      server_id: serverId,\n      key,\n      name,\n      host,\n      port,\n      timestamp: Date.now(),\n    };\n\n    await UT99QueryServers.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { query_servers: newServer } }\n    ).exec();\n\n    channel.send('Query Server added');\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"file":"ut99Handlers.js"}