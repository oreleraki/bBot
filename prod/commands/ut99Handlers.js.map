{"version":3,"sources":["../../src/commands/ut99Handlers.js"],"names":["servers","_","serverId","__","channel","state","store","getState","queryServers","queryChannel","list","id","send","sortedList","sort","a","b","timestamp","console","log","addQueryServer","hp","rest","roles","privilegedRoles","split","host","port","name","reduce","acc","curr","key","crypto","createHash","update","digest","some","s","newServer","Date","now","UT99QueryServers","findOneAndUpdate","server_id","$push","query_servers","exec","dispatch","queryServer"],"mappings":"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","sourcesContent":["import store from '../store';\nimport crypto from 'crypto';\nimport { UT99QueryServers } from '../models';\nimport { pushQueryServer } from '../store/actions';\nimport { hasPrivilegedRole } from '../utils';\nimport { formatQueryServers } from '../formats';\n\nexport const servers = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { queryChannel, list } = state.queryServers[serverId];\n\n    if (queryChannel !== channel.id)\n      return channel.send(`Active channel for querying is <#${queryChannel}>`);\n\n    const sortedList = list.sort((a, b) => a.timestamp - b.timestamp);\n    channel.send(formatQueryServers(sortedList));\n  } catch (error) {\n    console.log(error);\n    channel.send(`Something went wrong!`);\n  }\n};\n\nexport const addQueryServer = async (\n  { channel },\n  [hp, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    const state = store.getState();\n    const { list = [] } = state.queryServers[serverId];\n\n    const [host, port] = hp.split(':');\n    const name = rest.reduce((acc, curr) => (acc += curr + ' '), '');\n\n    if (!host || !port || !name) return channel.send('Invalid command');\n\n    const key = crypto\n      .createHash('sha256')\n      .update(hp)\n      .digest('hex');\n\n    if (list.some(s => s.key === key))\n      return channel.send('Query Server already exists!');\n\n    const newServer = {\n      key,\n      name,\n      host,\n      port,\n      timestamp: Date.now(),\n    };\n\n    await UT99QueryServers.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { query_servers: newServer } }\n    ).exec();\n\n    store.dispatch(pushQueryServer({ serverId, queryServer: newServer }));\n    channel.send('Query Server added');\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"file":"ut99Handlers.js"}