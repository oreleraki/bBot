{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["Pug","name","noOfPlayers","noOfTeams","pickingOrder","turn","picking","players","captains","timer","user","findPlayer","push","team","captain","pick","tag","rating","length","fillPug","playerIndex","findIndex","p","id","splice","stopPug","setTimeout","remaining","playersWithoutCaptain","filter","poolForCaptains","slice","sort","a","b","captainTimeout","cleanup","find","u","addGameType","serverId","channel","gameName","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","toLowerCase","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","listGameTypes","_","__","pugChannel","list","tempList","map","maxPlayers","gamesList","reduce","acc","curr","existingPug","guild","joinGameTypes","args","username","isPartOfFilledPug","toUpperCase","statuses","game","gameType","joined","pug","addPlayer","newPug","activeCount","leaveGameTypes","isOffline","left","isInPug","removePlayer","leaveAllGameTypes","message","hasGoneOffline","offline","listToLeave"],"mappings":"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","sourcesContent":["import store from '../store';\nimport { GameTypes } from '../models';\nimport { computePickingOrder, hasPrivilegedRole, shuffle } from '../utils';\nimport { privilegedRoles, captainTimeout, offline } from '../constants';\nimport {\n  formatListGameTypes,\n  formatJoinStatus,\n  formatLeaveStatus,\n} from '../formats';\nimport { assignGameTypes, addNewPug } from '../store/actions';\n\nclass Pug {\n  constructor({ name, noOfPlayers, noOfTeams, pickingOrder }) {\n    this.name = name;\n    this.noOfPlayers = noOfPlayers;\n    this.noOfTeams = noOfTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.players = [];\n    this.captains = [];\n    this.timer = null;\n  }\n\n  // 0 if couldn't join, 1 if joined, 2 if already in\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.findPlayer(user)) return 2;\n      this.players.push({\n        team: null,\n        captain: null,\n        pick: null,\n        tag: null,\n        rating: 0,\n        ...user,\n      });\n      this.players.length === this.noOfPlayers ? this.fillPug() : null;\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(user) {\n    const playerIndex = this.players.findIndex(p => p.id === user.id);\n    this.players.splice(playerIndex, 1);\n    if (this.picking) this.stopPug();\n  }\n\n  fillPug() {\n    this.picking = true;\n    this.timer = setTimeout(() => {\n      const remaining = this.noOfPlayers - this.captains.length;\n      const playersWithoutCaptain = this.noOfPlayers.filter(\n        p => p.captain === null\n      );\n      const poolForCaptains = shuffle(playersWithoutCaptain)\n        .slice(0, remaining * 0.8)\n        .sort((a, b) => a.rating - b.rating);\n\n      //  TODO\n    }, captainTimeout);\n  }\n\n  stopPug() {\n    this.cleanup();\n  }\n\n  findPlayer(user) {\n    return this.players.find(u => u.id === user.id);\n  }\n\n  cleanup() {\n    //  TODO\n  }\n}\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    if (!pickingOrder)\n      return channel.send(\n        'Invalid No. of players/teams. Picking order cannot be computed'\n      );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...game_types, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const tempList = gameTypes.map(g => {\n      return {\n        name: g.name,\n        players: 0,\n        maxPlayers: g.noOfPlayers,\n      };\n    });\n\n    const gamesList = tempList.reduce((acc, curr) => {\n      const existingPug = list.find(p => p.name === curr.name);\n      if (existingPug) {\n        acc.push({\n          name: existingPug.name,\n          maxPlayers: existingPug.noOfPlayers,\n          players: existingPug.players.length,\n        });\n      } else {\n        acc.push(curr);\n      }\n      return acc;\n    }, []);\n\n    channel.send(formatListGameTypes(channel.guild.name, gamesList));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    // TODO args length 0 (default join with .j)\n\n    if (!id) return channel.send('No user was mentioned');\n\n    const isPartOfFilledPug = list.find(\n      p => p.picking && p.players.some(u => u.id === id)\n    );\n\n    if (isPartOfFilledPug)\n      return channel.send(\n        `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n      );\n\n    const user = { id, username, roles };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n      const existingPug = list.find(p => p.name === game);\n      const pug = existingPug || new Pug(gameType);\n      const joined = pug.addPlayer(user);\n      if (!existingPug && joined) {\n        store.dispatch(addNewPug({ serverId, newPug: pug }));\n      }\n      return {\n        user,\n        joined,\n        name: game,\n        activeCount: pug.players.length,\n        maxPlayers: pug.noOfPlayers,\n      };\n    });\n    channel.send(formatJoinStatus(statuses));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles },\n  isOffline\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    if (!id) return channel.send('No user was mentioned');\n    if (args.length === 0)\n      return channel.send('Invalid, No pugs were mentioned');\n\n    const user = { id, username, roles };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, left: -1 }; // -1 is for NOT FOUND\n\n      const pug = list.find(p => p.name === game);\n      const isInPug = pug.findPlayer(user);\n      if (isInPug) {\n        pug.removePlayer(user);\n        return {\n          user,\n          pug,\n          name: game,\n          left: 1,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n      return { user, name: game, left: 0 };\n    });\n    channel.send(formatLeaveStatus(statuses, isOffline));\n    // TODO Compute deadpugs\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveAllGameTypes = async (message, args, serverId, user) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    console.log(message);\n    if (pugChannel !== message.channel.id)\n      return message.channel.send(\n        `Active channel for pugs is <#${pugChannel}>`\n      );\n\n    const hasGoneOffline = args[0] === offline;\n    const listToLeave = list.reduce((acc, pug) => {\n      const isInPug = pug.findPlayer(user);\n      if (isInPug) {\n        acc.push(pug.name);\n      }\n      return acc;\n    }, []);\n    leaveGameTypes(message, listToLeave, serverId, user, hasGoneOffline);\n  } catch (error) {\n    message.channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n"],"file":"pugHandlers.js"}