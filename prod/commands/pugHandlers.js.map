{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["pugEventEmitter","events","EventEmitter","Pug","name","noOfPlayers","noOfTeams","pickingOrder","turn","picking","players","captains","timer","user","findPlayer","push","team","captain","pick","tag","rating","stats","totalRating","playerIndex","findIndex","p","id","splice","stopPug","serverId","setTimeout","remaining","length","playersWithoutCaptain","filter","poolForCaptains","slice","sort","a","b","leastDiff","pair","i","left","diff","Math","abs","right","smallest","min","firstCaptain","secondCaptain","fillCaptainSpot","find","u","otherCaptainIndex","otherCaptain","otherCaptainTeam","pIndex","didFillSpot","emit","pugEvents","captainsReady","captainTimeout","teamIndex","areCaptainsDecided","clearTimeout","captainsDecided","pickedPlayers","player","lastPlayerIndex","lastPlayerTeam","finished","cleanup","Boolean","forEach","addGameType","channel","gameName","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","toLowerCase","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","listGameTypes","_","__","pugChannel","list","tempList","map","maxPlayers","gamesList","reduce","acc","curr","existingPug","guild","listAllCurrentGameTypes","joinGameTypes","args","username","isInvisible","isPartOfFilledPug","toUpperCase","Users","findOne","db_user","toBroadcast","statuses","game","gameType","joined","pug","hasFilledBeforeJoining","addPlayer","fillPug","hasFilledAfterJoining","newPug","activeCount","allLeaveMsgs","op","allPugLeaveMsgs","j","leaveGameTypes","msg","isOffline","returnStatus","isInPug","removePlayer","deadPugs","isEmpty","leaveStatus","leaveAllGameTypes","message","hasGoneOffline","offline","listToLeave","addCaptain","forWhichPug","isCandidate","result","pickPlayer","index","alreadyPicked","Pugs","timestamp","Date","save","updatedStats","existingStats","totalCaptain","totalPugs","$set","last_pug","upsert","pugPicking","pugsInPicking","promoteAvailablePugs","error","adminAddPlayer","mentionedUser","adminRemovePlayer","adminPickPlayer"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAMA;;AAMA;;AAYA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,eAAe,GAAG,IAAIC,mBAAOC,YAAX,EAAxB;;;IAEDC,G;;;AACJ,qBAA4D;AAAA,QAA9CC,IAA8C,QAA9CA,IAA8C;AAAA,QAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,QAA3BC,SAA2B,QAA3BA,SAA2B;AAAA,QAAhBC,YAAgB,QAAhBA,YAAgB;;AAAA;;AAC1D,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,KAAL,GAAa,IAAb;AACD,G,CAED;;;;;8BACUC,I,EAAM;AACd,UAAI,CAAC,KAAKJ,OAAV,EAAmB;AACjB,YAAI,KAAKK,UAAL,CAAgBD,IAAhB,CAAJ,EAA2B,OAAO,CAAP;AAC3B,aAAKH,OAAL,CAAaK,IAAb;AACEC,UAAAA,IAAI,EAAE,IADR;AAEEC,UAAAA,OAAO,EAAE,IAFX;AAGEC,UAAAA,IAAI,EAAE,IAHR;AAIEC,UAAAA,GAAG,EAAE,IAJP;AAKEC,UAAAA,MAAM,EAAEP,IAAI,CAACQ,KAAL,CAAW,KAAKjB,IAAhB,IAAwBS,IAAI,CAACQ,KAAL,CAAW,KAAKjB,IAAhB,EAAsBkB,WAA9C,GAA4D;AALtE,WAMKT,IANL;AAQA,eAAO,CAAP;AACD;;AACD,aAAO,CAAP;AACD;;;iCAEYA,I,EAAM;AACjB,UAAMU,WAAW,GAAG,KAAKb,OAAL,CAAac,SAAb,CAAuB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,EAAF,KAASb,IAAI,CAACa,EAAlB;AAAA,OAAxB,CAApB;AACA,WAAKhB,OAAL,CAAaiB,MAAb,CAAoBJ,WAApB,EAAiC,CAAjC;AACA,UAAI,KAAKd,OAAT,EAAkB,KAAKmB,OAAL;AACnB;;;4BAEOC,Q,EAAU;AAAA;;AAChB,WAAKpB,OAAL,GAAe,IAAf;AACA,WAAKG,KAAL,GAAakB,UAAU,CAAC,YAAM;AAC5B,YAAMC,SAAS,GAAG,KAAI,CAAC1B,WAAL,GAAmB,KAAI,CAACM,QAAL,CAAcqB,MAAnD;;AACA,YAAMC,qBAAqB,GAAG,KAAI,CAACvB,OAAL,CAAawB,MAAb,CAC5B,UAAAT,CAAC;AAAA,iBAAIA,CAAC,CAACR,OAAF,KAAc,IAAlB;AAAA,SAD2B,CAA9B;;AAGA,YAAMkB,eAAe,GAAG,oBAAQF,qBAAR,EACrBG,KADqB,CACf,CADe,EACZL,SAAS,GAAG,GADA,EAErBM,IAFqB,CAEhB,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,CAAClB,MAAF,GAAWmB,CAAC,CAACnB,MAAvB;AAAA,SAFgB,CAAxB;;AAIA,YAAI,KAAI,CAACd,SAAL,KAAmB,CAAvB,EAA0B;AACxB,cAAI,KAAI,CAACK,QAAL,CAAcqB,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,gBAAIQ,SAAS,GAAG,CAAhB;AACA,gBAAIC,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAX;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,eAAe,CAACH,MAAhB,GAAyB,CAA7C,EAAgDU,CAAC,EAAjD,EAAqD;AACnD,kBAAMC,IAAI,GAAG;AACXF,gBAAAA,IAAI,EAAE,CAACC,CAAD,EAAIA,CAAC,GAAG,CAAR,CADK;AAEXE,gBAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,CACJX,eAAe,CAACO,CAAD,CAAf,CAAmBtB,MAAnB,GAA4Be,eAAe,CAACO,CAAC,GAAG,CAAL,CAAf,CAAuBtB,MAD/C;AAFK,eAAb;AAMA,kBAAM2B,KAAK,GAAG;AACZN,gBAAAA,IAAI,EAAE,CAACC,CAAD,EAAIA,CAAC,GAAG,CAAR,CADM;AAEZE,gBAAAA,IAAI,EAAEC,IAAI,CAACC,GAAL,CACJX,eAAe,CAACO,CAAD,CAAf,CAAmBtB,MAAnB,GAA4Be,eAAe,CAACO,CAAC,GAAG,CAAL,CAAf,CAAuBtB,MAD/C;AAFM,eAAd;AAOA,kBAAM4B,QAAQ,GAAGH,IAAI,CAACI,GAAL,CAASN,IAAI,CAACC,IAAd,EAAoBG,KAAK,CAACH,IAA1B,CAAjB;;AACA,kBAAII,QAAQ,KAAKL,IAAI,CAACC,IAAlB,IAA0BI,QAAQ,IAAIR,SAA1C,EAAqD;AACnDA,gBAAAA,SAAS,GAAGG,IAAI,CAACC,IAAjB;AACAH,gBAAAA,IAAI,GAAGE,IAAI,CAACF,IAAZ;AACD,eAHD,MAGO,IAAIO,QAAQ,KAAKD,KAAK,CAACH,IAAnB,IAA2BI,QAAQ,IAAIR,SAA3C,EAAsD;AAC3DA,gBAAAA,SAAS,GAAGO,KAAK,CAACH,IAAlB;AACAH,gBAAAA,IAAI,GAAGM,KAAK,CAACN,IAAb;AACD;AACF;;AACD,gBAAMS,YAAY,GAAGf,eAAe,CAACM,IAAI,CAAC,CAAD,CAAL,CAApC;AACA,gBAAMU,aAAa,GAAGhB,eAAe,CAACM,IAAI,CAAC,CAAD,CAAL,CAArC;;AAEA,gBAAIS,YAAY,CAAC9B,MAAb,IAAuB+B,aAAa,CAAC/B,MAAzC,EAAiD;AAC/C,cAAA,KAAI,CAACgC,eAAL,CAAqBF,YAArB,EAAmC,CAAnC;;AACA,cAAA,KAAI,CAACE,eAAL,CAAqBD,aAArB,EAAoC,CAApC;AACD,aAHD,MAGO;AACL,cAAA,KAAI,CAACC,eAAL,CAAqBF,YAArB,EAAmC,CAAnC;;AACA,cAAA,KAAI,CAACE,eAAL,CAAqBD,aAArB,EAAoC,CAApC;AACD;AACF,WApCD,MAoCO;AACL;AACA,gBAAMD,aAAY,GAAG,KAAI,CAACxC,OAAL,CAAa2C,IAAb,CAAkB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACrC,OAAF,KAAc,IAAlB;AAAA,aAAnB,CAArB;;AACA,gBAAIuB,UAAS,GAAG,KAAhB;AACA,gBAAIe,iBAAiB,GAAG,IAAxB;;AACA,iBAAK,IAAIb,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGP,eAAe,CAACH,MAApC,EAA4CU,EAAC,EAA7C,EAAiD;AAC/C,kBAAME,IAAI,GAAGC,IAAI,CAACC,GAAL,CACXI,aAAY,CAAC9B,MAAb,GAAsBe,eAAe,CAACO,EAAD,CAAf,CAAmBtB,MAD9B,CAAb;;AAGA,kBAAIwB,IAAI,IAAIJ,UAAZ,EAAuB;AACrBA,gBAAAA,UAAS,GAAGI,IAAZ;AACAW,gBAAAA,iBAAiB,GAAGb,EAApB;AACD;AACF;;AAED,gBAAMc,YAAY,GAAGrB,eAAe,CAACoB,iBAAD,CAApC;AACA,gBAAME,gBAAgB,GAAGZ,IAAI,CAACC,GAAL,CAAUI,aAAY,CAAClC,IAAb,GAAoB,CAArB,GAA0B,CAAnC,CAAzB;;AACA,YAAA,KAAI,CAACoC,eAAL,CAAqBI,YAArB,EAAmCC,gBAAnC;AACD;AACF,SAxDD,MAwDO;AACL;AACA,eAAK,IAAIf,GAAC,GAAG,CAAb,EAAgBA,GAAC,GAAG,KAAI,CAACpC,SAAzB,EAAoCoC,GAAC,EAArC,EAAyC;AACvC,gBAAI,KAAI,CAAC/B,QAAL,CAAc+B,GAAd,CAAJ,EAAsB;;AACtB,mBAAO,CAAP,EAAU;AACR,kBAAMgB,MAAM,GAAG,yBAAa,CAAb,EAAgBvB,eAAe,CAACH,MAAhB,GAAyB,CAAzC,CAAf;;AACA,kBAAM2B,WAAW,GAAG,KAAI,CAACP,eAAL,CAClBjB,eAAe,CAACuB,MAAD,CADG,EAElBhB,GAFkB,CAApB;;AAIA,kBAAIiB,WAAJ,EAAiB;AAClB;AACF;AACF;;AAED3D,QAAAA,eAAe,CAAC4D,IAAhB,CAAqBC,qBAAUC,aAA/B,EAA8CjC,QAA9C,EAAwD,KAAI,CAACzB,IAA7D,EAhF4B,CAiF5B;AACD,OAlFsB,EAkFpB2D,yBAlFoB,CAAvB;AAmFD;;;+BAEUlD,I,EAAM;AACf,UAAImD,SAAJ;;AACA,aAAO,CAAP,EAAU;AACRA,QAAAA,SAAS,GAAG,yBAAa,CAAb,EAAgB,KAAK1D,SAAL,GAAiB,CAAjC,CAAZ;AACA,YAAMqD,WAAW,GAAG,KAAKP,eAAL,CAAqBvC,IAArB,EAA2BmD,SAA3B,CAApB;AACA,YAAIL,WAAJ,EAAiB;AAClB;;AAED,UAAI,KAAKM,kBAAL,EAAJ,EAA+BC,YAAY,CAAC,KAAKtD,KAAN,CAAZ;AAC/B,aAAO;AACLI,QAAAA,IAAI,EAAEgD,SADD;AAELG,QAAAA,eAAe,EAAE,KAAKF,kBAAL;AAFZ,OAAP;AAID;;;oCAEepD,I,EAAMmD,S,EAAW;AAC/B,UAAMN,MAAM,GAAG,KAAKhD,OAAL,CAAac,SAAb,CAAuB,UAAA8B,CAAC;AAAA,eAAIA,CAAC,CAAC5B,EAAF,KAASb,IAAI,CAACa,EAAlB;AAAA,OAAxB,CAAf;;AACA,UAAI,KAAKhB,OAAL,CAAagD,MAAb,EAAqBzC,OAArB,KAAiC,IAAjC,IAAyC,CAAC,KAAKN,QAAL,CAAcqD,SAAd,CAA9C,EAAwE;AACtE,aAAKtD,OAAL,CAAagD,MAAb,EAAqBzC,OAArB,GAA+B,KAAKP,OAAL,CAAagD,MAAb,EAAqB1C,IAArB,GAA4BgD,SAA3D;AACA,aAAKtD,OAAL,CAAagD,MAAb,EAAqBxC,IAArB,GAA4B,CAA5B;AACA,aAAKP,QAAL,CAAcqD,SAAd,IAA2B,KAAKtD,OAAL,CAAagD,MAAb,CAA3B;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD;;;+BAEUnC,W,EAAaP,I,EAAM;AAC5B,UAAI,KAAKN,OAAL,CAAaa,WAAb,EAA0BP,IAA1B,KAAmC,IAAvC,EAA6C;AAC3C,aAAKN,OAAL,CAAaa,WAAb,EAA0BP,IAA1B,GAAiCA,IAAjC;AACA,aAAKR,IAAL,IAAa,CAAb;AACA,aAAKE,OAAL,CAAaa,WAAb,EAA0BL,IAA1B,GAAiC,KAAKV,IAAtC;AAEA,YAAI4D,aAAa,GAAG,CAAC;AAAEC,UAAAA,MAAM,EAAE,KAAK3D,OAAL,CAAaa,WAAb,CAAV;AAAqCP,UAAAA,IAAI,EAAJA;AAArC,SAAD,CAApB,CAL2C,CAM3C;;AACA,YAAI,KAAKR,IAAL,KAAc,KAAKD,YAAL,CAAkByB,MAAlB,GAA2B,CAA7C,EAAgD;AAC9C,cAAMsC,eAAe,GAAG,KAAK5D,OAAL,CAAac,SAAb,CAAuB,UAAA8B,CAAC;AAAA,mBAAIA,CAAC,CAACtC,IAAF,KAAW,IAAf;AAAA,WAAxB,CAAxB;AACA,cAAMuD,cAAc,GAAG,KAAKhE,YAAL,CAAkB,KAAKC,IAAvB,CAAvB;AAEA,eAAKE,OAAL,CAAa4D,eAAb,EAA8BtD,IAA9B,GAAqCuD,cAArC;AACA,eAAK/D,IAAL,IAAa,CAAb;AACA,eAAKE,OAAL,CAAa4D,eAAb,EAA8BpD,IAA9B,GAAqC,KAAKV,IAA1C,CAN8C,CAO9C;;AACA,eAAKC,OAAL,GAAe,KAAf;AACA2D,UAAAA,aAAa,CAACrD,IAAd,CAAmB;AACjBsD,YAAAA,MAAM,EAAE,KAAK3D,OAAL,CAAa4D,eAAb,CADS;AAEjBtD,YAAAA,IAAI,EAAEuD;AAFW,WAAnB;AAIA,iBAAO;AACLH,YAAAA,aAAa,EAAbA,aADK;AAELI,YAAAA,QAAQ,EAAE;AAFL,WAAP;AAID;;AACD,eAAO;AACLJ,UAAAA,aAAa,EAAbA,aADK;AAELI,UAAAA,QAAQ,EAAE;AAFL,SAAP;AAID;AACF;;;8BAES;AACR,WAAKC,OAAL;AACD;;;+BAEU5D,I,EAAM;AACf,aAAO,KAAKH,OAAL,CAAa2C,IAAb,CAAkB,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAAC5B,EAAF,KAASb,IAAI,CAACa,EAAlB;AAAA,OAAnB,CAAP;AACD;;;8BAES;AACR,aAAO,KAAKhB,OAAL,CAAasB,MAAb,KAAwB,CAAxB,GAA4B,IAA5B,GAAmC,KAA1C;AACD;;;yCAEoB;AACnB,aAAO,KAAKrB,QAAL,CAAcuB,MAAd,CAAqBwC,OAArB,EAA8B1C,MAA9B,KAAyC,KAAK1B,SAArD;AACD;;;8BAES;AACR;AACA,WAAKG,OAAL,GAAe,KAAf;AACA,WAAKD,IAAL,GAAY,CAAZ;AACA,WAAKG,QAAL,GAAgB,EAAhB;AACA,WAAKD,OAAL,CAAaiE,OAAb,CAAqB,UAAA9D,IAAI;AAAA,eAAKA,IAAI,CAACI,OAAL,GAAeJ,IAAI,CAACG,IAAL,GAAYH,IAAI,CAACK,IAAL,GAAY,IAA5C;AAAA,OAAzB;AACAgD,MAAAA,YAAY,CAAC,KAAKtD,KAAN,CAAZ;AACD;;;;;;AAGI,IAAMgE,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,+BAGzB/C,QAHyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBgD,YAAAA,OADuB,SACvBA,OADuB;AAAA,8CAExBC,QAFwB,aAEdzE,WAFc,aAEDC,SAFC;AAIvByE,YAAAA,KAJuB,SAIvBA,KAJuB;AAAA;;AAAA,gBAOlB,8BAAkBC,0BAAlB,EAAmCD,KAAnC,CAPkB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAQnBE,KAAK,CAAC5E,WAAD,CAAL,IAAsB4E,KAAK,CAAC3E,SAAD,CAA3B,IAA0C,CAACwE,QARxB;AAAA;AAAA;AAAA;;AAAA,6CASdD,OAAO,CAACK,IAAR,CAAa,iBAAb,CATc;;AAAA;AAWjBC,YAAAA,KAXiB,GAWTC,kBAAMC,QAAN,EAXS;AAYfC,YAAAA,SAZe,GAYDH,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAZC,CAYfyD,SAZe;;AAAA,iBAcnBA,SAAS,CAACE,IAAV,CAAe,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACrF,IAAF,KAAW0E,QAAQ,CAACY,WAAT,EAAf;AAAA,aAAhB,CAdmB;AAAA;AAAA;AAAA;;AAAA,6CAedb,OAAO,CAACK,IAAR,CAAa,yBAAb,CAfc;;AAAA;AAiBjB3E,YAAAA,YAjBiB,GAiBF,gCACnBoF,QAAQ,CAACtF,WAAD,CADW,EAEnBsF,QAAQ,CAACrF,SAAD,CAFW,CAjBE;;AAAA,gBAsBlBC,YAtBkB;AAAA;AAAA;AAAA;;AAAA,6CAuBdsE,OAAO,CAACK,IAAR,CACL,gEADK,CAvBc;;AAAA;AA2BjBU,YAAAA,WA3BiB,GA2BH;AAClBxF,cAAAA,IAAI,EAAE0E,QAAQ,CAACY,WAAT,EADY;AAElBnF,cAAAA,YAAY,EAAZA,YAFkB;AAGlBF,cAAAA,WAAW,EAAEsF,QAAQ,CAACtF,WAAD,CAHH;AAIlBC,cAAAA,SAAS,EAAEqF,QAAQ,CAACrF,SAAD;AAJD,aA3BG;AAAA;AAAA,mBAkCjBuF,kBAAUC,gBAAV,CACJ;AAAEC,cAAAA,SAAS,EAAElE;AAAb,aADI,EAEJ;AAAEmE,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,UAAU,EAAEL;AAAd;AAAT,aAFI,EAGJM,IAHI,EAlCiB;;AAAA;AAsCvBd,8BAAMe,QAAN,CACE,8BAAgB;AAAEtE,cAAAA,QAAQ,EAARA,QAAF;AAAYyD,cAAAA,SAAS,+BAAMA,SAAN,IAAiBM,WAAjB;AAArB,aAAhB,CADF;;AAIAf,YAAAA,OAAO,CAACK,IAAR,aAAkBJ,QAAlB;AA1CuB;AAAA;;AAAA;AAAA;AAAA;AA4CvBD,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AA7CuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXzB,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAiDA,IAAM0B,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,gCAGzBzE,QAHyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBgD,YAAAA,OADuB,SACvBA,OADuB;AAAA,sCAExBC,QAFwB,cAEXyB,IAFW;AAIvBxB,YAAAA,KAJuB,SAIvBA,KAJuB;AAAA;;AAAA,gBAOlB,8BAAkBC,0BAAlB,EAAmCD,KAAnC,CAPkB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AASjBI,YAAAA,KATiB,GASTC,kBAAMC,QAAN,EATS;AAUfC,YAAAA,SAVe,GAUDH,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAVC,CAUfyD,SAVe;;AAAA,gBAYlBA,SAAS,CAACE,IAAV,CAAe,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACrF,IAAF,KAAW0E,QAAQ,CAACY,WAAT,EAAf;AAAA,aAAhB,CAZkB;AAAA;AAAA;AAAA;;AAAA,8CAadb,OAAO,CAACK,IAAR,CAAa,wBAAb,CAbc;;AAAA;AAejBsB,YAAAA,gBAfiB,GAeElB,SAAS,CAACpD,MAAV,CACvB,UAAAuD,CAAC;AAAA,qBAAIA,CAAC,CAACrF,IAAF,KAAW0E,QAAQ,CAACY,WAAT,EAAf;AAAA,aADsB,CAfF;AAAA;AAAA,mBAmBjBG,kBAAUC,gBAAV,CACJ;AAAEC,cAAAA,SAAS,EAAElE;AAAb,aADI,EAEJ;AAAEoE,cAAAA,UAAU,EAAEO;AAAd,aAFI,EAGJN,IAHI,EAnBiB;;AAAA;AAuBvBd,8BAAMe,QAAN,CAAe,8BAAgB;AAAEtE,cAAAA,QAAQ,EAARA,QAAF;AAAYyD,cAAAA,SAAS,EAAEkB;AAAvB,aAAhB,CAAf;;AAEA3B,YAAAA,OAAO,CAACK,IAAR,aAAkBJ,QAAlB;AAzBuB;AAAA;;AAAA;AAAA;AAAA;AA2BvBD,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AA5BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXC,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAgCA,IAAMG,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,0BAAoBC,CAApB,EAAuB7E,QAAvB,EAAiC8E,EAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAS9B,YAAAA,OAAT,UAASA,OAAT;AAAA;AAEnBM,YAAAA,KAFmB,GAEXC,kBAAMC,QAAN,EAFW;AAAA,mCAGeF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAHf,EAGjB+E,UAHiB,wBAGjBA,UAHiB,EAGLtB,SAHK,wBAGLA,SAHK,EAGMuB,IAHN,wBAGMA,IAHN;;AAAA,kBAKrBD,UAAU,KAAK/B,OAAO,CAACnD,EALF;AAAA;AAAA;AAAA;;AAAA,8CAMhBmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OANgB;;AAAA;AAQnBE,YAAAA,QARmB,GAQRxB,SAAS,CAACyB,GAAV,CAAc,UAAAtB,CAAC,EAAI;AAClC,qBAAO;AACLrF,gBAAAA,IAAI,EAAEqF,CAAC,CAACrF,IADH;AAELM,gBAAAA,OAAO,EAAE,CAFJ;AAGLsG,gBAAAA,UAAU,EAAEvB,CAAC,CAACpF;AAHT,eAAP;AAKD,aANgB,CARQ;AAgBnB4G,YAAAA,SAhBmB,GAgBPH,QAAQ,CAACI,MAAT,CAAgB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC/C,kBAAMC,WAAW,GAAGR,IAAI,CAACxD,IAAL,CAAU,UAAA5B,CAAC;AAAA,uBAAIA,CAAC,CAACrB,IAAF,KAAWgH,IAAI,CAAChH,IAApB;AAAA,eAAX,CAApB;;AACA,kBAAIiH,WAAJ,EAAiB;AACfF,gBAAAA,GAAG,CAACpG,IAAJ,CAAS;AACPX,kBAAAA,IAAI,EAAEiH,WAAW,CAACjH,IADX;AAEP4G,kBAAAA,UAAU,EAAEK,WAAW,CAAChH,WAFjB;AAGPK,kBAAAA,OAAO,EAAE2G,WAAW,CAAC3G,OAAZ,CAAoBsB;AAHtB,iBAAT;AAKD,eAND,MAMO;AACLmF,gBAAAA,GAAG,CAACpG,IAAJ,CAASqG,IAAT;AACD;;AACD,qBAAOD,GAAP;AACD,aAZiB,EAYf,EAZe,CAhBO;AA8BzBtC,YAAAA,OAAO,CAACK,IAAR,CAAa,kCAAoBL,OAAO,CAACyC,KAAR,CAAclH,IAAlC,EAAwC6G,SAAxC,CAAb;AA9ByB;AAAA;;AAAA;AAAA;AAAA;AAgCzBpC,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAjCyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbI,aAAa;AAAA;AAAA;AAAA,GAAnB;;;;AAqCA,IAAMc,uBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,0BAAoBb,CAApB,EAAuB7E,QAAvB,EAAiC8E,EAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAS9B,YAAAA,OAAT,UAASA,OAAT;AAAA;AAE7BM,YAAAA,KAF6B,GAErBC,kBAAMC,QAAN,EAFqB;AAAA,oCAGNF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAHM,EAG3B+E,UAH2B,yBAG3BA,UAH2B,EAGfC,IAHe,yBAGfA,IAHe;;AAAA,kBAK/BD,UAAU,KAAK/B,OAAO,CAACnD,EALQ;AAAA;AAAA;AAAA;;AAAA,8CAM1BmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAN0B;;AAAA;AAQnC/B,YAAAA,OAAO,CAACK,IAAR,CAAa,4CAA8B2B,IAA9B,EAAoChC,OAAO,CAACyC,KAAR,CAAclH,IAAlD,CAAb;AARmC;AAAA;;AAAA;AAAA;AAAA;AAUnCyE,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAXmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBkB,uBAAuB;AAAA;AAAA;AAAA,GAA7B;;;;AAeA,IAAMC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,0BAE3BC,IAF2B,EAG3B5F,QAH2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBgD,YAAAA,OADyB,UACzBA,OADyB;AAIzBnD,YAAAA,EAJyB,UAIzBA,EAJyB,EAIrBgG,QAJqB,UAIrBA,QAJqB,EAIX3C,KAJW,UAIXA,KAJW,EAIJ4C,WAJI,UAIJA,WAJI;AAAA;AAOnBxC,YAAAA,KAPmB,GAOXC,kBAAMC,QAAN,EAPW;AAAA,oCAQeF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CARf,EAQjB+E,UARiB,yBAQjBA,UARiB,EAQLC,IARK,yBAQLA,IARK,EAQCvB,SARD,yBAQCA,SARD;;AAAA,kBAUrBsB,UAAU,KAAK/B,OAAO,CAACnD,EAVF;AAAA;AAAA;AAAA;;AAAA,8CAWhBmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAXgB;;AAAA;AAAA,iBAcrBe,WAdqB;AAAA;AAAA;AAAA;;AAAA,8CAehB9C,OAAO,CAACK,IAAR,2CAfgB;;AAAA;AAAA,gBAiBpBxD,EAjBoB;AAAA;AAAA;AAAA;;AAAA,8CAiBTmD,OAAO,CAACK,IAAR,CAAa,uBAAb,CAjBS;;AAAA;AAmBnB0C,YAAAA,iBAnBmB,GAmBCf,IAAI,CAACxD,IAAL,CACxB,UAAA5B,CAAC;AAAA,qBAAIA,CAAC,CAAChB,OAAF,IAAagB,CAAC,CAACf,OAAF,CAAU8E,IAAV,CAAe,UAAAlC,CAAC;AAAA,uBAAIA,CAAC,CAAC5B,EAAF,KAASA,EAAb;AAAA,eAAhB,CAAjB;AAAA,aADuB,CAnBD;;AAAA,iBAuBrBkG,iBAvBqB;AAAA;AAAA;AAAA;;AAAA,8CAwBhB/C,OAAO,CAACK,IAAR,0BACa0C,iBAAiB,CAACxH,IAAlB,CAAuByH,WAAvB,EADb,iCAxBgB;;AAAA;AAAA;AAAA,mBA4BHC,cAAMC,OAAN,CAAc;AAAEhC,cAAAA,SAAS,EAAElE,QAAb;AAAuBH,cAAAA,EAAE,EAAEA;AAA3B,aAAd,EAA+CwE,IAA/C,EA5BG;;AAAA;AA4BnB8B,YAAAA,OA5BmB;AA8BrBC,YAAAA,WA9BqB,GA8BP,IA9BO;AA+BnBpH,YAAAA,IA/BmB,GA+BZ;AAAEa,cAAAA,EAAE,EAAFA,EAAF;AAAMgG,cAAAA,QAAQ,EAARA,QAAN;AAAgBrG,cAAAA,KAAK,EAAE2G,OAAO,GAAGA,OAAO,CAAC3G,KAAX,GAAmB;AAAjD,aA/BY;AAgCnB6G,YAAAA,QAhCmB,GAgCRT,IAAI,CAACV,GAAL,CAAS,UAAAzE,CAAC,EAAI;AAC7B,kBAAI,CAAC2F,WAAL,EAAkB;AAChB,oBAAME,IAAI,GAAG7F,CAAC,CAACoD,WAAF,EAAb;AACA,oBAAM0C,QAAQ,GAAG9C,SAAS,CAACjC,IAAV,CAAe,UAAAoC,CAAC;AAAA,yBAAIA,CAAC,CAACrF,IAAF,KAAW+H,IAAf;AAAA,iBAAhB,CAAjB;AAEA,oBAAI,CAACC,QAAL,EAAe,OAAO;AAAEvH,kBAAAA,IAAI,EAAJA,IAAF;AAAQT,kBAAAA,IAAI,EAAE+H,IAAd;AAAoBE,kBAAAA,MAAM,EAAE,CAAC;AAA7B,iBAAP,CAJC,CAIwC;;AAExD,oBAAMhB,WAAW,GAAGR,IAAI,CAACxD,IAAL,CAAU,UAAA5B,CAAC;AAAA,yBAAIA,CAAC,CAACrB,IAAF,KAAW+H,IAAf;AAAA,iBAAX,CAApB;AACA,oBAAMG,GAAG,GAAGjB,WAAW,IAAI,IAAIlH,GAAJ,CAAQiI,QAAR,CAA3B;AAEA,oBAAMG,sBAAsB,GAAGD,GAAG,CAAC7H,OAAnC;AACA,oBAAM4H,MAAM,GAAGC,GAAG,CAACE,SAAJ,CAAc3H,IAAd,CAAf;AACAyH,gBAAAA,GAAG,CAAC5H,OAAJ,CAAYsB,MAAZ,KAAuBsG,GAAG,CAACjI,WAA3B,GAAyCiI,GAAG,CAACG,OAAJ,CAAY5G,QAAZ,CAAzC,GAAiE,IAAjE;AACA,oBAAM6G,qBAAqB,GAAGJ,GAAG,CAAC7H,OAAlC;;AAEA,oBAAI,CAAC8H,sBAAD,IAA2BG,qBAA/B,EAAsD;AACpDT,kBAAAA,WAAW,GAAGK,GAAd;AACD;;AAED,oBAAI,CAACjB,WAAD,IAAgBgB,MAApB,EAA4B;AAC1BjD,oCAAMe,QAAN,CAAe,wBAAU;AAAEtE,oBAAAA,QAAQ,EAARA,QAAF;AAAY8G,oBAAAA,MAAM,EAAEL;AAApB,mBAAV,CAAf;AACD;;AAED,uBAAO;AACLzH,kBAAAA,IAAI,EAAJA,IADK;AAELwH,kBAAAA,MAAM,EAANA,MAFK;AAGLjI,kBAAAA,IAAI,EAAE+H,IAHD;AAILS,kBAAAA,WAAW,EAAEN,GAAG,CAAC5H,OAAJ,CAAYsB,MAJpB;AAKLgF,kBAAAA,UAAU,EAAEsB,GAAG,CAACjI;AALX,iBAAP;AAOD;AACF,aA/BgB,CAhCQ;AAgEzBwE,YAAAA,OAAO,CAACK,IAAR,CAAa,+BAAiBgD,QAAQ,CAAChG,MAAT,CAAgBwC,OAAhB,CAAjB,CAAb;;AAhEyB,iBAiErBuD,WAjEqB;AAAA;AAAA;AAAA;;AAkEnBY,YAAAA,YAlEmB;AAmEdnG,YAAAA,CAnEc,GAmEV,CAnEU;;AAAA;AAAA,kBAmEPA,CAAC,GAAGmE,IAAI,CAAC7E,MAnEF;AAAA;AAAA;AAAA;;AAoEf8G,YAAAA,EApEe,GAoEVjC,IAAI,CAACnE,CAAD,CApEM;;AAAA,kBAqEjBoG,EAAE,CAAC1I,IAAH,KAAY6H,WAAW,CAAC7H,IArEP;AAAA;AAAA;AAAA;;AAsEf2I,YAAAA,eAtEe;AAuEVC,YAAAA,CAvEU,GAuEN,CAvEM;;AAAA;AAAA,kBAuEHA,CAAC,GAAGf,WAAW,CAACvH,OAAZ,CAAoBsB,MAvErB;AAAA;AAAA;AAAA;;AAwEXqC,YAAAA,MAxEW,GAwEF4D,WAAW,CAACvH,OAAZ,CAAoBsI,CAApB,CAxEE;;AAAA,iBAyEbF,EAAE,CAAChI,UAAH,CAAcuD,MAAd,CAzEa;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA0EG4E,cAAc,CAC9B;AAAEpE,cAAAA,OAAO,EAAPA;AAAF,aAD8B,EAE9B,CAACiE,EAAE,CAAC1I,IAAJ,CAF8B,EAG9ByB,QAH8B,EAI9BwC,MAJ8B,EAK9B,IAL8B,EAM9B,IAN8B,CA1EjB;;AAAA;AA0ET6E,YAAAA,GA1ES;AAkFfH,YAAAA,eAAe,cAAOG,GAAP,MAAf;;AAlFe;AAuE6BF,YAAAA,CAAC,EAvE9B;AAAA;AAAA;;AAAA;AAqFnBH,YAAAA,YAAY,cAAOE,eAAP,QAAZ;;AArFmB;AAmEUrG,YAAAA,CAAC,EAnEX;AAAA;AAAA;;AAAA;AAyFvBmG,YAAAA,YAAY,IAAIhE,OAAO,CAACK,IAAR,CAAa2D,YAAb,CAAhB;AACAhE,YAAAA,OAAO,CAACK,IAAR,CAAa,iCAAmB+C,WAAnB,CAAb;;AA1FuB;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6FzBpD,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AA9FyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbmB,aAAa;AAAA;AAAA;AAAA,GAAnB;;;;AAkGA,IAAMyB,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,0BAE5BxB,IAF4B,EAG5B5F,QAH4B,UAK5BsH,SAL4B,EAM5BC,YAN4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BvE,YAAAA,OAD0B,UAC1BA,OAD0B;AAI1BnD,YAAAA,EAJ0B,UAI1BA,EAJ0B,EAItBgG,QAJsB,UAItBA,QAJsB,EAIZ3C,KAJY,UAIZA,KAJY;AAAA;AASpBI,YAAAA,KAToB,GASZC,kBAAMC,QAAN,EATY;AAAA,oCAUcF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAVd,EAUlB+E,UAVkB,yBAUlBA,UAVkB,EAUNC,IAVM,yBAUNA,IAVM,EAUAvB,SAVA,yBAUAA,SAVA;;AAAA,kBAYtBsB,UAAU,KAAK/B,OAAO,CAACnD,EAZD;AAAA;AAAA;AAAA;;AAAA,8CAajBmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAbiB;;AAAA;AAAA,gBAerBlF,EAfqB;AAAA;AAAA;AAAA;;AAAA,8CAeVmD,OAAO,CAACK,IAAR,CAAa,uBAAb,CAfU;;AAAA;AAAA,kBAgBtBuC,IAAI,CAACzF,MAAL,KAAgB,CAhBM;AAAA;AAAA;AAAA;;AAAA,8CAiBjB6C,OAAO,CAACK,IAAR,CAAa,iCAAb,CAjBiB;;AAAA;AAmBpBrE,YAAAA,IAnBoB,GAmBb;AAAEa,cAAAA,EAAE,EAAFA,EAAF;AAAMgG,cAAAA,QAAQ,EAARA;AAAN,aAnBa;AAoBpBQ,YAAAA,QApBoB,GAoBTT,IAAI,CAACV,GAAL,CAAS,UAAAzE,CAAC,EAAI;AAC7B,kBAAM6F,IAAI,GAAG7F,CAAC,CAACoD,WAAF,EAAb;AACA,kBAAM0C,QAAQ,GAAG9C,SAAS,CAACjC,IAAV,CAAe,UAAAoC,CAAC;AAAA,uBAAIA,CAAC,CAACrF,IAAF,KAAW+H,IAAf;AAAA,eAAhB,CAAjB;AAEA,kBAAI,CAACC,QAAL,EAAe,OAAO;AAAEvH,gBAAAA,IAAI,EAAJA,IAAF;AAAQT,gBAAAA,IAAI,EAAE+H,IAAd;AAAoBxF,gBAAAA,IAAI,EAAE,CAAC;AAA3B,eAAP,CAJc,CAIyB;;AAEtD,kBAAM2F,GAAG,GAAGzB,IAAI,CAACxD,IAAL,CAAU,UAAA5B,CAAC;AAAA,uBAAIA,CAAC,CAACrB,IAAF,KAAW+H,IAAf;AAAA,eAAX,CAAZ;AACA,kBAAMkB,OAAO,GAAGf,GAAG,IAAIA,GAAG,CAACxH,UAAJ,CAAeD,IAAf,CAAvB;;AACA,kBAAIwI,OAAJ,EAAa;AACXf,gBAAAA,GAAG,CAACgB,YAAJ,CAAiBzI,IAAjB;AACA,uBAAO;AACLA,kBAAAA,IAAI,EAAJA,IADK;AAELyH,kBAAAA,GAAG,EAAHA,GAFK;AAGLlI,kBAAAA,IAAI,EAAE+H,IAHD;AAILxF,kBAAAA,IAAI,EAAE,CAJD;AAKLiG,kBAAAA,WAAW,EAAEN,GAAG,CAAC5H,OAAJ,CAAYsB,MALpB;AAMLgF,kBAAAA,UAAU,EAAEsB,GAAG,CAACjI;AANX,iBAAP;AAQD;;AACD,qBAAO;AAAEQ,gBAAAA,IAAI,EAAJA,IAAF;AAAQT,gBAAAA,IAAI,EAAE+H,IAAd;AAAoBxF,gBAAAA,IAAI,EAAE;AAA1B,eAAP;AACD,aApBgB,CApBS,EAyC1B;;AACM4G,YAAAA,QA1CoB,GA0CTrB,QAAQ,CAAChB,MAAT,CACf,UAACC,GAAD,UAAuD;AAAA,kBAA/CtG,IAA+C,UAA/CA,IAA+C;AAAA,kBAAzCyH,GAAyC,UAAzCA,GAAyC;AAAA,kBAApClI,IAAoC,UAApCA,IAAoC;AAAA,kBAA9BwI,WAA8B,UAA9BA,WAA8B;AAAA,kBAAjB5B,UAAiB,UAAjBA,UAAiB;;AACrD,kBAAI4B,WAAW,KAAK5B,UAAU,GAAG,CAAjC,EAAoC;AAClCG,gBAAAA,GAAG,CAACpG,IAAJ,CAAS;AAAEuH,kBAAAA,GAAG,EAAHA,GAAF;AAAOzH,kBAAAA,IAAI,EAAJA;AAAP,iBAAT;AACD;;AACD,kBAAIyH,GAAG,IAAIA,GAAG,CAACkB,OAAJ,EAAX,EAA0B;AACxBpE,kCAAMe,QAAN,CAAe,wBAAU;AAAEtE,kBAAAA,QAAQ,EAARA,QAAF;AAAYzB,kBAAAA,IAAI,EAAJA;AAAZ,iBAAV,CAAf;AACD;;AACD,qBAAO+G,GAAP;AACD,aATc,EAUf,EAVe,CA1CS;AAuDpBsC,YAAAA,WAvDoB,GAuDN,gCAAkBvB,QAAlB,EAA4BiB,SAA5B,CAvDM;;AAAA,iBAwDtBC,YAxDsB;AAAA;AAAA;AAAA;;AAAA,8CAwDDK,WAxDC;;AAAA;AA0D1B5E,YAAAA,OAAO,CAACK,IAAR,CAAauE,WAAb;AACAF,YAAAA,QAAQ,CAACvH,MAAT,GAAkB,CAAlB,GAAsB6C,OAAO,CAACK,IAAR,CAAa,6BAAeqE,QAAf,CAAb,CAAtB,GAA+D,IAA/D;AA3D0B;AAAA;;AAAA;AAAA;AAAA;AA6D1B1E,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AA9D0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAd4C,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AAkEA,IAAMS,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kBAAOC,OAAP,EAAgBlC,IAAhB,EAAsB5F,QAAtB,EAAgChB,IAAhC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEvBsE,YAAAA,KAFuB,GAEfC,kBAAMC,QAAN,EAFe;AAAA,oCAGAF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAHA,EAGrB+E,UAHqB,yBAGrBA,UAHqB,EAGTC,IAHS,yBAGTA,IAHS;;AAAA,kBAKzBD,UAAU,KAAK+C,OAAO,CAAC9E,OAAR,CAAgBnD,EALN;AAAA;AAAA;AAAA;;AAAA,8CAMpBiI,OAAO,CAAC9E,OAAR,CAAgBK,IAAhB,wCAC2B0B,UAD3B,OANoB;;AAAA;AAUvBgD,YAAAA,cAVuB,GAUNnC,IAAI,CAAC,CAAD,CAAJ,KAAYoC,kBAVN;AAWvBC,YAAAA,WAXuB,GAWTjD,IAAI,CAACK,MAAL,CAAY,UAACC,GAAD,EAAMmB,GAAN,EAAc;AAC5C,kBAAMe,OAAO,GAAGf,GAAG,CAACxH,UAAJ,CAAeD,IAAf,CAAhB;;AACA,kBAAIwI,OAAJ,EAAa;AACXlC,gBAAAA,GAAG,CAACpG,IAAJ,CAASuH,GAAG,CAAClI,IAAb;AACD;;AACD,qBAAO+G,GAAP;AACD,aANmB,EAMjB,EANiB,CAXS;;AAAA,kBAkBzB2C,WAAW,CAAC9H,MAAZ,KAAuB,CAlBE;AAAA;AAAA;AAAA;;AAAA,8CAmBpB6C,OAAO,CAACK,IAAR,gEAnBoB;;AAAA;AAuB7B+D,YAAAA,cAAc,CAACU,OAAD,EAAUG,WAAV,EAAuBjI,QAAvB,EAAiChB,IAAjC,EAAuC+I,cAAvC,CAAd;AAvB6B;AAAA;;AAAA;AAAA;AAAA;AAyB7BD,YAAAA,OAAO,CAAC9E,OAAR,CAAgBK,IAAhB,CAAqB,sBAArB;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AA1B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBqD,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;;;AA8BA,IAAMK,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,0BAExBtC,IAFwB,EAGxB5F,QAHwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBgD,YAAAA,OADsB,UACtBA,OADsB;AAItBnD,YAAAA,EAJsB,UAItBA,EAJsB,EAIlBgG,QAJkB,UAIlBA,QAJkB,EAIR3C,KAJQ,UAIRA,KAJQ;AAAA;AAOhBI,YAAAA,KAPgB,GAORC,kBAAMC,QAAN,EAPQ;AAAA,oCAQOF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CARP,EAQd+E,UARc,yBAQdA,UARc,EAQFC,IARE,yBAQFA,IARE;;AAAA,kBAUlBD,UAAU,KAAK/B,OAAO,CAACnD,EAVL;AAAA;AAAA;AAAA;;AAAA,8CAWbmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAXa;;AAAA;AAahBoD,YAAAA,WAbgB,GAaFnD,IAAI,CAACxD,IAAL,CAAU,UAAAiF,GAAG,EAAI;AACnC,kBAAM2B,WAAW,GAAG3B,GAAG,CAAC7H,OAAJ,IAAe,CAAC6H,GAAG,CAACrE,kBAAJ,EAApC;;AACA,kBAAIgG,WAAJ,EAAiB;AACf,uBAAO3B,GAAG,CAAC5H,OAAJ,CAAY8E,IAAZ,CAAiB,UAAAlC,CAAC;AAAA,yBAAIA,CAAC,CAAC5B,EAAF,KAASA,EAAb;AAAA,iBAAlB,CAAP,CADe,CAC4B;AAC5C;;AACD,qBAAO,KAAP;AACD,aANmB,CAbE;;AAAA,gBAqBjBsI,WArBiB;AAAA;AAAA;AAAA;;AAAA,8CAsBbnF,OAAO,CAACK,IAAR,CACL,qDADK,CAtBa;;AAAA;AAAA,gBA0BjB8E,WAAW,CAACtJ,OAAZ,CAAoB8E,IAApB,CAAyB,UAAAlC,CAAC;AAAA,qBAAIA,CAAC,CAAC5B,EAAF,KAASA,EAAT,IAAe4B,CAAC,CAACrC,OAAF,KAAc,IAAjC;AAAA,aAA1B,CA1BiB;AAAA;AAAA;AAAA;;AAAA,8CA2Bb4D,OAAO,CAACK,IAAR,aAAkBwC,QAAlB,6BA3Ba;;AAAA;AA6BhB7G,YAAAA,IA7BgB,GA6BT;AAAEa,cAAAA,EAAE,EAAFA,EAAF;AAAMgG,cAAAA,QAAQ,EAARA;AAAN,aA7BS;AA8BhBwC,YAAAA,MA9BgB,GA8BPF,WAAW,CAACD,UAAZ,CAAuBlJ,IAAvB,CA9BO;AA+BtBgE,YAAAA,OAAO,CAACK,IAAR,CAAa,qCAAuBrE,IAAvB,EAA6BqJ,MAA7B,CAAb,EA/BsB,CAgCtB;;AACA,gBAAIA,MAAM,CAAC/F,eAAX,EAA4B;AAC1B;AACAnE,cAAAA,eAAe,CAAC4D,IAAhB,CAAqBC,qBAAUC,aAA/B,EAA8CjC,QAA9C,EAAwDmI,WAAW,CAAC5J,IAApE;AACD;;AApCqB;AAAA;;AAAA;AAAA;AAAA;AAsCtByE,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAvCsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV0D,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;AA2CA,IAAMI,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,kCAGxBtI,QAHwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACtBgD,YAAAA,OADsB,UACtBA,OADsB;AAAA,uCAEvBuF,KAFuB,cAEb3C,IAFa;AAItB/F,YAAAA,EAJsB,UAItBA,EAJsB,EAIlBgG,QAJkB,UAIlBA,QAJkB,EAIR3C,KAJQ,UAIRA,KAJQ;AAAA;AAOhBI,YAAAA,KAPgB,GAORC,kBAAMC,QAAN,EAPQ;AAAA,oCAQOF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CARP,EAQd+E,UARc,yBAQdA,UARc,EAQFC,IARE,yBAQFA,IARE;;AAAA,kBAUlBD,UAAU,KAAK/B,OAAO,CAACnD,EAVL;AAAA;AAAA;AAAA;;AAAA,8CAWbmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAXa;;AAAA;AAahBrF,YAAAA,WAbgB,GAaFoE,QAAQ,CAACyE,KAAD,CAbN;;AAAA,gBAcjB7I,WAdiB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAgBhByI,YAAAA,WAhBgB,GAgBFnD,IAAI,CAACxD,IAAL,CAAU,UAAAiF,GAAG,EAAI;AACnC,kBAAIA,GAAG,CAAC7H,OAAR,EAAiB;AACf,uBAAO6H,GAAG,CAAC5H,OAAJ,CAAY8E,IAAZ,CAAiB,UAAAlC,CAAC;AAAA,yBAAIA,CAAC,CAAC5B,EAAF,KAASA,EAAT,IAAe4B,CAAC,CAACrC,OAAF,KAAc,IAAjC;AAAA,iBAAlB,CAAP,CADe,CACkD;AAClE;;AACD,qBAAO,KAAP;AACD,aALmB,CAhBE;;AAAA,gBAuBjB+I,WAvBiB;AAAA;AAAA;AAAA;;AAAA,8CAwBbnF,OAAO,CAACK,IAAR,CACL,+DADK,CAxBa;;AAAA;AAAA,gBA4BjB8E,WAAW,CAAC/F,kBAAZ,EA5BiB;AAAA;AAAA;AAAA;;AAAA,8CA6BbY,OAAO,CAACK,IAAR,CAAa,kDAAb,CA7Ba;;AAAA;AAAA,oCA+BL8E,WAAW,CAACtJ,OAAZ,CAAoB2C,IAApB,CACf,UAAAC,CAAC;AAAA,qBAAKA,CAAC,CAAC5B,EAAF,KAASA,EAAV,GAAiB4B,CAAC,CAACrC,OAAF,KAAc,IAAnC;AAAA,aADc,CA/BK,EA+BdD,IA/Bc,yBA+BdA,IA/Bc;AAkCdT,YAAAA,YAlCc,GAkCeyJ,WAlCf,CAkCdzJ,YAlCc,EAkCAC,IAlCA,GAkCewJ,WAlCf,CAkCAxJ,IAlCA,EAkCMJ,IAlCN,GAkCe4J,WAlCf,CAkCM5J,IAlCN;;AAAA,kBAoClBY,IAAI,KAAKT,YAAY,CAACC,IAAD,CApCH;AAAA;AAAA;AAAA;;AAAA,8CAqCbqE,OAAO,CAACK,IAAR,CAAa,0CAAb,CArCa;;AAAA;AAAA,kBAuClB3D,WAAW,GAAG,CAAd,IAAmBA,WAAW,GAAGyI,WAAW,CAACtJ,OAAZ,CAAoBsB,MAvCnC;AAAA;AAAA;AAAA;;AAAA,8CAwCb6C,OAAO,CAACK,IAAR,CAAa,cAAb,CAxCa;;AAAA;AAAA,kBA0ClB8E,WAAW,CAACtJ,OAAZ,CAAoBa,WAAW,GAAG,CAAlC,EAAqCP,IAArC,KAA8C,IA1C5B;AAAA;AAAA;AAAA;;AA2CdqJ,YAAAA,aA3Cc,GA2CEL,WAAW,CAACtJ,OAAZ,CAAoBa,WAAW,GAAG,CAAlC,CA3CF;AAAA,8CA4CbsD,OAAO,CAACK,IAAR,WAAgBmF,aAAa,CAAC3C,QAA9B,wBA5Ca;;AAAA;AA+ChBwC,YAAAA,MA/CgB,GA+CPF,WAAW,CAACG,UAAZ,CAAuB5I,WAAW,GAAG,CAArC,EAAwChB,YAAY,CAACC,IAAD,CAApD,CA/CO;AAgDtBqE,YAAAA,OAAO,CAACK,IAAR,CAAa,uDAA4BgF,MAA5B;AAAoC5B,cAAAA,GAAG,EAAE0B;AAAzC,eAAb,EAhDsB,CAkDtB;;AACA,gBAAIE,MAAM,CAAC1F,QAAX,EAAqB;AACnB,kBAAI8F,YAAJ,CAAS;AACPvE,gBAAAA,SAAS,EAAElE,QADJ;AAEPzB,gBAAAA,IAAI,EAAE4J,WAAW,CAAC5J,IAFX;AAGPkI,gBAAAA,GAAG,EAAE0B,WAHE;AAIPO,gBAAAA,SAAS,EAAE,IAAIC,IAAJ;AAJJ,eAAT,EAKGC,IALH;AAOM/J,cAAAA,OARa,GAQHsJ,WAAW,CAACtJ,OART;AAUnBA,cAAAA,OAAO,CAACiE,OAAR,CAAgB,kBAA4C;AAAA,oBAAzCjD,EAAyC,UAAzCA,EAAyC;AAAA,oBAArCgG,QAAqC,UAArCA,QAAqC;AAAA,oBAA3BxG,IAA2B,UAA3BA,IAA2B;AAAA,oBAArBD,OAAqB,UAArBA,OAAqB;AAAA,oBAAZI,KAAY,UAAZA,KAAY;AAC1D,oBAAIqJ,YAAY,GAAG,EAAnB;AACA,oBAAMC,aAAa,GAAGtJ,KAAK,CAAC2I,WAAW,CAAC5J,IAAb,CAA3B;;AACA,oBAAI,CAACuK,aAAL,EAAoB;AAClBD,kBAAAA,YAAY,GAAG;AACbpJ,oBAAAA,WAAW,EAAEJ,IADA;AAEb0J,oBAAAA,YAAY,EAAE3J,OAAO,GAAG,CAAH,GAAO,CAFf;AAGb4J,oBAAAA,SAAS,EAAE;AAHE,mBAAf;AAKD,iBAND,MAMO;AACLH,kBAAAA,YAAY,GAAG;AACbpJ,oBAAAA,WAAW,EACT,CAACqJ,aAAa,CAACrJ,WAAd,GAA4BJ,IAA7B,KACCyJ,aAAa,CAACE,SAAd,GAA0B,CAD3B,CAFW;AAIbD,oBAAAA,YAAY,EAAED,aAAa,CAACC,YAAd,GAA6B,CAJ9B;AAKbC,oBAAAA,SAAS,EAAEF,aAAa,CAACE,SAAd,GAA0B;AALxB,mBAAf;AAOD;;AAED/C,8BAAMhC,gBAAN,CACE;AAAEpE,kBAAAA,EAAE,EAAFA,EAAF;AAAMqE,kBAAAA,SAAS,EAAElE;AAAjB,iBADF,EAEE;AACEiJ,kBAAAA,IAAI,EAAE;AACJpD,oBAAAA,QAAQ,EAARA,QADI;AAEJqD,oBAAAA,QAAQ,EAAEf,WAFN;AAGJ3I,oBAAAA,KAAK,oBAAOA,KAAP,sBAAe2I,WAAW,CAAC5J,IAA3B,EAAkCsK,YAAlC;AAHD;AADR,iBAFF,EASE;AACEM,kBAAAA,MAAM,EAAE;AADV,iBATF,EAYE9E,IAZF;AAaD,eAhCD;;AAkCAd,gCAAMe,QAAN,CAAe,wBAAU;AAAEtE,gBAAAA,QAAQ,EAARA,QAAF;AAAYzB,gBAAAA,IAAI,EAAJA;AAAZ,eAAV,CAAf;AACD;;AAhGqB;AAAA;;AAAA;AAAA;AAAA;AAkGtByE,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAnGsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV8D,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;AAuGA,IAAMc,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,2BAAoBvE,CAApB,EAAuB7E,QAAvB,EAAiC8E,EAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAS9B,YAAAA,OAAT,UAASA,OAAT;AAAA;AAEhBM,YAAAA,KAFgB,GAERC,kBAAMC,QAAN,EAFQ;AAAA,oCAGOF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAHP,EAGd+E,UAHc,yBAGdA,UAHc,EAGFC,IAHE,yBAGFA,IAHE;;AAAA,kBAKlBD,UAAU,KAAK/B,OAAO,CAACnD,EALL;AAAA;AAAA;AAAA;;AAAA,+CAMbmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OANa;;AAAA;AAQhBsE,YAAAA,aARgB,GAQArE,IAAI,CAAC3E,MAAL,CACpB,UAAAoG,GAAG;AAAA,qBAAIA,GAAG,CAAC7H,OAAJ,IAAe6H,GAAG,CAACrE,kBAAJ,EAAnB;AAAA,aADiB,CARA;;AAAA,kBAYlBiH,aAAa,CAAClJ,MAAd,KAAyB,CAZP;AAAA;AAAA;AAAA;;AAAA,+CAab6C,OAAO,CAACK,IAAR,CAAa,mCAAb,CAba;;AAAA;AAgBtBL,YAAAA,OAAO,CAACK,IAAR,CAAa,kCAAoBgG,aAApB,CAAb;AAhBsB;AAAA;;AAAA;AAAA;AAAA;AAkBtBrG,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAnBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV4E,UAAU;AAAA;AAAA;AAAA,GAAhB;;;;AAuBA,IAAME,oBAAoB,GAAG,SAAvBA,oBAAuB,SAAc1D,IAAd,EAAoB5F,QAApB,EAA8B6E,CAA9B,EAAoC;AAAA,MAAjC7B,OAAiC,UAAjCA,OAAiC;;AACtE,MAAI;AACF,QAAMM,KAAK,GAAGC,kBAAMC,QAAN,EAAd;;AADE,gCAE2BF,KAAK,CAACI,IAAN,CAAW1D,QAAX,CAF3B;AAAA,QAEM+E,UAFN,yBAEMA,UAFN;AAAA,QAEkBC,IAFlB,yBAEkBA,IAFlB;AAIF,QAAID,UAAU,KAAK/B,OAAO,CAACnD,EAA3B,EACE,OAAOmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAAP;AAEFC,IAAAA,IAAI,CAAC7E,MAAL,GAAc,CAAd,GACI6C,OAAO,CAACK,IAAR,CAAa,yCAA2B2B,IAA3B,EAAiChC,OAAO,CAACyC,KAAR,CAAclH,IAA/C,CAAb,CADJ,GAEIyE,OAAO,CAACK,IAAR,CAAa,uDAAb,CAFJ;AAGD,GAVD,CAUE,OAAOkG,KAAP,EAAc;AACdvG,IAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,IAAAA,OAAO,CAACC,GAAR,CAAY+E,KAAZ;AACD;AACF,CAfM;AAiBP;;;;;;;;AAKO,IAAMC,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,2BAE5B5D,IAF4B,EAG5B5F,QAH4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BgD,YAAAA,OAD0B,UAC1BA,OAD0B;AAI1ByG,YAAAA,aAJ0B,UAI1BA,aAJ0B,EAIXvG,KAJW,UAIXA,KAJW;AAAA;AAOpBI,YAAAA,KAPoB,GAOZC,kBAAMC,QAAN,EAPY;AAQlBuB,YAAAA,UARkB,GAQHzB,KAAK,CAACI,IAAN,CAAW1D,QAAX,CARG,CAQlB+E,UARkB;;AAAA,kBAUtBA,UAAU,KAAK/B,OAAO,CAACnD,EAVD;AAAA;AAAA;AAAA;;AAAA,+CAWjBmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAXiB;;AAAA;AAAA,gBAarB,8BAAkB5B,0BAAlB,EAAmCD,KAAnC,CAbqB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAcrBuG,aAdqB;AAAA;AAAA;AAAA;;AAAA,+CAcCzG,OAAO,CAACK,IAAR,CAAa,mBAAb,CAdD;;AAAA;AAgB1BsC,YAAAA,aAAa,CAAC;AAAE3C,cAAAA,OAAO,EAAPA;AAAF,aAAD,EAAc4C,IAAI,CAACrF,KAAL,CAAW,CAAX,CAAd,EAA6BP,QAA7B,EAAuC;AAClDH,cAAAA,EAAE,EAAE4J,aAAa,CAAC5J,EADgC;AAElDgG,cAAAA,QAAQ,EAAE4D,aAAa,CAAC5D;AAF0B,aAAvC,CAAb;AAhB0B;AAAA;;AAAA;AAAA;AAAA;AAqB1B7C,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAtB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdgF,cAAc;AAAA;AAAA;AAAA,GAApB;;;;AA0BA,IAAME,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,2BAE/B9D,IAF+B,EAG/B5F,QAH+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BgD,YAAAA,OAD6B,UAC7BA,OAD6B;AAI7ByG,YAAAA,aAJ6B,UAI7BA,aAJ6B,EAIdvG,KAJc,UAIdA,KAJc;AAAA;AAOvBI,YAAAA,KAPuB,GAOfC,kBAAMC,QAAN,EAPe;AAQrBuB,YAAAA,UARqB,GAQNzB,KAAK,CAACI,IAAN,CAAW1D,QAAX,CARM,CAQrB+E,UARqB;;AAAA,kBAUzBA,UAAU,KAAK/B,OAAO,CAACnD,EAVE;AAAA;AAAA;AAAA;;AAAA,+CAWpBmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAXoB;;AAAA;AAAA,gBAaxB,8BAAkB5B,0BAAlB,EAAmCD,KAAnC,CAbwB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAcxBuG,aAdwB;AAAA;AAAA;AAAA;;AAAA,+CAcFzG,OAAO,CAACK,IAAR,CAAa,mBAAb,CAdE;;AAAA;AAgB7B+D,YAAAA,cAAc,CAAC;AAAEpE,cAAAA,OAAO,EAAPA;AAAF,aAAD,EAAc4C,IAAI,CAACrF,KAAL,CAAW,CAAX,CAAd,EAA6BP,QAA7B,EAAuC;AACnDH,cAAAA,EAAE,EAAE4J,aAAa,CAAC5J,EADiC;AAEnDgG,cAAAA,QAAQ,EAAE4D,aAAa,CAAC5D;AAF2B,aAAvC,CAAd;AAhB6B;AAAA;;AAAA;AAAA;AAAA;AAqB7B7C,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAtB6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBkF,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;;;AA0BA,IAAMC,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,2BAE7B/D,IAF6B,EAG7B5F,QAH6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BgD,YAAAA,OAD2B,UAC3BA,OAD2B;AAI3ByG,YAAAA,aAJ2B,UAI3BA,aAJ2B,EAIZvG,KAJY,UAIZA,KAJY;AAAA;AAOrBI,YAAAA,KAPqB,GAObC,kBAAMC,QAAN,EAPa;AAQnBuB,YAAAA,UARmB,GAQJzB,KAAK,CAACI,IAAN,CAAW1D,QAAX,CARI,CAQnB+E,UARmB;;AAAA,kBAUvBA,UAAU,KAAK/B,OAAO,CAACnD,EAVA;AAAA;AAAA;AAAA;;AAAA,+CAWlBmD,OAAO,CAACK,IAAR,wCAA6C0B,UAA7C,OAXkB;;AAAA;AAAA,gBAatB,8BAAkB5B,0BAAlB,EAAmCD,KAAnC,CAbsB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBActBuG,aAdsB;AAAA;AAAA;AAAA;;AAAA,+CAcAzG,OAAO,CAACK,IAAR,CAAa,mBAAb,CAdA;;AAAA;AAgB3BiF,YAAAA,UAAU,CAAC;AAAEtF,cAAAA,OAAO,EAAPA;AAAF,aAAD,EAAc4C,IAAI,CAACrF,KAAL,CAAW,CAAX,CAAd,EAA6BP,QAA7B,EAAuC;AAC/CH,cAAAA,EAAE,EAAE4J,aAAa,CAAC5J,EAD6B;AAE/CgG,cAAAA,QAAQ,EAAE4D,aAAa,CAAC5D;AAFuB,aAAvC,CAAV;AAhB2B;AAAA;;AAAA;AAAA;AAAA;AAqB3B7C,YAAAA,OAAO,CAACK,IAAR,CAAa,sBAAb;AACAkB,YAAAA,OAAO,CAACC,GAAR;;AAtB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfmF,eAAe;AAAA;AAAA;AAAA,GAArB","sourcesContent":["import store from '../store';\nimport { GameTypes, Pugs, Users } from '../models';\nimport {\n  computePickingOrder,\n  hasPrivilegedRole,\n  shuffle,\n  getRandomInt,\n} from '../utils';\nimport {\n  privilegedRoles,\n  captainTimeout,\n  offline,\n  pugEvents,\n} from '../constants';\nimport {\n  formatListGameTypes,\n  formatJoinStatus,\n  formatLeaveStatus,\n  formatBroadcastPug,\n  formatListAllCurrentGameTypes,\n  formatAddCaptainStatus,\n  formatPugsInPicking,\n  formatDeadPugs,\n  formatPickPlayerStatus,\n  formatPromoteAvailablePugs,\n} from '../formats';\nimport { assignGameTypes, addNewPug, removePug } from '../store/actions';\nimport events from 'events';\nimport { User } from 'discord.js';\n\nexport const pugEventEmitter = new events.EventEmitter();\n\nclass Pug {\n  constructor({ name, noOfPlayers, noOfTeams, pickingOrder }) {\n    this.name = name;\n    this.noOfPlayers = noOfPlayers;\n    this.noOfTeams = noOfTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.players = [];\n    this.captains = [];\n    this.timer = null;\n  }\n\n  // 0 if couldn't join, 1 if joined, 2 if already in\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.findPlayer(user)) return 2;\n      this.players.push({\n        team: null,\n        captain: null,\n        pick: null,\n        tag: null,\n        rating: user.stats[this.name] ? user.stats[this.name].totalRating : 0,\n        ...user,\n      });\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(user) {\n    const playerIndex = this.players.findIndex(p => p.id === user.id);\n    this.players.splice(playerIndex, 1);\n    if (this.picking) this.stopPug();\n  }\n\n  fillPug(serverId) {\n    this.picking = true;\n    this.timer = setTimeout(() => {\n      const remaining = this.noOfPlayers - this.captains.length;\n      const playersWithoutCaptain = this.players.filter(\n        p => p.captain === null\n      );\n      const poolForCaptains = shuffle(playersWithoutCaptain)\n        .slice(0, remaining * 0.8)\n        .sort((a, b) => a.rating - b.rating);\n\n      if (this.noOfTeams === 2) {\n        if (this.captains.length === 0) {\n          let leastDiff = 0;\n          let pair = [0, 1];\n          for (let i = 1; i < poolForCaptains.length - 1; i++) {\n            const left = {\n              pair: [i, i - 1],\n              diff: Math.abs(\n                poolForCaptains[i].rating - poolForCaptains[i - 1].rating\n              ),\n            };\n            const right = {\n              pair: [i, i + 1],\n              diff: Math.abs(\n                poolForCaptains[i].rating - poolForCaptains[i + 1].rating\n              ),\n            };\n\n            const smallest = Math.min(left.diff, right.diff);\n            if (smallest === left.diff && smallest <= leastDiff) {\n              leastDiff = left.diff;\n              pair = left.pair;\n            } else if (smallest === right.diff && smallest <= leastDiff) {\n              leastDiff = right.diff;\n              pair = right.pair;\n            }\n          }\n          const firstCaptain = poolForCaptains[pair[0]];\n          const secondCaptain = poolForCaptains[pair[1]];\n\n          if (firstCaptain.rating >= secondCaptain.rating) {\n            this.fillCaptainSpot(firstCaptain, 0);\n            this.fillCaptainSpot(secondCaptain, 1);\n          } else {\n            this.fillCaptainSpot(firstCaptain, 1);\n            this.fillCaptainSpot(secondCaptain, 0);\n          }\n        } else {\n          // 1 capt already there\n          const firstCaptain = this.players.find(u => u.captain !== null);\n          let leastDiff = 10000;\n          let otherCaptainIndex = null;\n          for (let i = 0; i < poolForCaptains.length; i++) {\n            const diff = Math.abs(\n              firstCaptain.rating - poolForCaptains[i].rating\n            );\n            if (diff <= leastDiff) {\n              leastDiff = diff;\n              otherCaptainIndex = i;\n            }\n          }\n\n          const otherCaptain = poolForCaptains[otherCaptainIndex];\n          const otherCaptainTeam = Math.abs((firstCaptain.team % 2) - 1);\n          this.fillCaptainSpot(otherCaptain, otherCaptainTeam);\n        }\n      } else {\n        // more than 2 capts\n        for (let i = 0; i < this.noOfTeams; i++) {\n          if (this.captains[i]) continue;\n          while (1) {\n            const pIndex = getRandomInt(0, poolForCaptains.length - 1);\n            const didFillSpot = this.fillCaptainSpot(\n              poolForCaptains[pIndex],\n              i\n            );\n            if (didFillSpot) break;\n          }\n        }\n      }\n\n      pugEventEmitter.emit(pugEvents.captainsReady, serverId, this.name);\n      //  TODO\n    }, captainTimeout);\n  }\n\n  addCaptain(user) {\n    let teamIndex;\n    while (1) {\n      teamIndex = getRandomInt(0, this.noOfTeams - 1);\n      const didFillSpot = this.fillCaptainSpot(user, teamIndex);\n      if (didFillSpot) break;\n    }\n\n    if (this.areCaptainsDecided()) clearTimeout(this.timer);\n    return {\n      team: teamIndex,\n      captainsDecided: this.areCaptainsDecided(),\n    };\n  }\n\n  fillCaptainSpot(user, teamIndex) {\n    const pIndex = this.players.findIndex(u => u.id === user.id);\n    if (this.players[pIndex].captain === null && !this.captains[teamIndex]) {\n      this.players[pIndex].captain = this.players[pIndex].team = teamIndex;\n      this.players[pIndex].pick = 0;\n      this.captains[teamIndex] = this.players[pIndex];\n      return true;\n    }\n    return false;\n  }\n\n  pickPlayer(playerIndex, team) {\n    if (this.players[playerIndex].team === null) {\n      this.players[playerIndex].team = team;\n      this.turn += 1;\n      this.players[playerIndex].pick = this.turn;\n\n      let pickedPlayers = [{ player: this.players[playerIndex], team }];\n      // last pick automatically goes\n      if (this.turn === this.pickingOrder.length - 1) {\n        const lastPlayerIndex = this.players.findIndex(u => u.team === null);\n        const lastPlayerTeam = this.pickingOrder[this.turn];\n\n        this.players[lastPlayerIndex].team = lastPlayerTeam;\n        this.turn += 1;\n        this.players[lastPlayerIndex].pick = this.turn;\n        // pug ends\n        this.picking = false;\n        pickedPlayers.push({\n          player: this.players[lastPlayerIndex],\n          team: lastPlayerTeam,\n        });\n        return {\n          pickedPlayers,\n          finished: true,\n        };\n      }\n      return {\n        pickedPlayers,\n        finished: false,\n      };\n    }\n  }\n\n  stopPug() {\n    this.cleanup();\n  }\n\n  findPlayer(user) {\n    return this.players.find(u => u.id === user.id);\n  }\n\n  isEmpty() {\n    return this.players.length === 0 ? true : false;\n  }\n\n  areCaptainsDecided() {\n    return this.captains.filter(Boolean).length === this.noOfTeams;\n  }\n\n  cleanup() {\n    //  TODO\n    this.picking = false;\n    this.turn = 0;\n    this.captains = [];\n    this.players.forEach(user => (user.captain = user.team = user.pick = null));\n    clearTimeout(this.timer);\n  }\n}\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    if (!pickingOrder)\n      return channel.send(\n        'Invalid No. of players/teams. Picking order cannot be computed'\n      );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...gameTypes, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const tempList = gameTypes.map(g => {\n      return {\n        name: g.name,\n        players: 0,\n        maxPlayers: g.noOfPlayers,\n      };\n    });\n\n    const gamesList = tempList.reduce((acc, curr) => {\n      const existingPug = list.find(p => p.name === curr.name);\n      if (existingPug) {\n        acc.push({\n          name: existingPug.name,\n          maxPlayers: existingPug.noOfPlayers,\n          players: existingPug.players.length,\n        });\n      } else {\n        acc.push(curr);\n      }\n      return acc;\n    }, []);\n\n    channel.send(formatListGameTypes(channel.guild.name, gamesList));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listAllCurrentGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    channel.send(formatListAllCurrentGameTypes(list, channel.guild.name));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles, isInvisible }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    // TODO args length 0 (default join with .j)\n    if (isInvisible)\n      return channel.send(`Cannot use this command while invisible`);\n\n    if (!id) return channel.send('No user was mentioned');\n\n    const isPartOfFilledPug = list.find(\n      p => p.picking && p.players.some(u => u.id === id)\n    );\n\n    if (isPartOfFilledPug)\n      return channel.send(\n        `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n      );\n\n    const db_user = await Users.findOne({ server_id: serverId, id: id }).exec();\n\n    let toBroadcast = null;\n    const user = { id, username, stats: db_user ? db_user.stats : {} };\n    const statuses = args.map(a => {\n      if (!toBroadcast) {\n        const game = a.toLowerCase();\n        const gameType = gameTypes.find(g => g.name === game);\n\n        if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n        const existingPug = list.find(p => p.name === game);\n        const pug = existingPug || new Pug(gameType);\n\n        const hasFilledBeforeJoining = pug.picking;\n        const joined = pug.addPlayer(user);\n        pug.players.length === pug.noOfPlayers ? pug.fillPug(serverId) : null;\n        const hasFilledAfterJoining = pug.picking;\n\n        if (!hasFilledBeforeJoining && hasFilledAfterJoining) {\n          toBroadcast = pug;\n        }\n\n        if (!existingPug && joined) {\n          store.dispatch(addNewPug({ serverId, newPug: pug }));\n        }\n\n        return {\n          user,\n          joined,\n          name: game,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n    });\n    channel.send(formatJoinStatus(statuses.filter(Boolean)));\n    if (toBroadcast) {\n      let allLeaveMsgs = ``;\n      for (let i = 0; i < list.length; i++) {\n        const op = list[i];\n        if (op.name !== toBroadcast.name) {\n          let allPugLeaveMsgs = ``;\n          for (let j = 0; j < toBroadcast.players.length; j++) {\n            const player = toBroadcast.players[j];\n            if (op.findPlayer(player)) {\n              const msg = await leaveGameTypes(\n                { channel },\n                [op.name],\n                serverId,\n                player,\n                null,\n                true\n              );\n              allPugLeaveMsgs += `${msg} `;\n            }\n          }\n          allLeaveMsgs += `${allPugLeaveMsgs} \\n`;\n        }\n      }\n\n      allLeaveMsgs && channel.send(allLeaveMsgs);\n      channel.send(formatBroadcastPug(toBroadcast));\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles },\n  isOffline,\n  returnStatus\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    if (!id) return channel.send('No user was mentioned');\n    if (args.length === 0)\n      return channel.send('Invalid, No pugs were mentioned');\n\n    const user = { id, username };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, left: -1 }; // -1 is for NOT FOUND\n\n      const pug = list.find(p => p.name === game);\n      const isInPug = pug && pug.findPlayer(user);\n      if (isInPug) {\n        pug.removePlayer(user);\n        return {\n          user,\n          pug,\n          name: game,\n          left: 1,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n      return { user, name: game, left: 0 };\n    });\n    // TODO Compute deadpugs\n    const deadPugs = statuses.reduce(\n      (acc, { user, pug, name, activeCount, maxPlayers }) => {\n        if (activeCount === maxPlayers - 1) {\n          acc.push({ pug, user });\n        }\n        if (pug && pug.isEmpty()) {\n          store.dispatch(removePug({ serverId, name }));\n        }\n        return acc;\n      },\n      []\n    );\n\n    const leaveStatus = formatLeaveStatus(statuses, isOffline);\n    if (returnStatus) return leaveStatus;\n\n    channel.send(leaveStatus);\n    deadPugs.length > 0 ? channel.send(formatDeadPugs(deadPugs)) : null;\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveAllGameTypes = async (message, args, serverId, user) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== message.channel.id)\n      return message.channel.send(\n        `Active channel for pugs is <#${pugChannel}>`\n      );\n\n    const hasGoneOffline = args[0] === offline;\n    const listToLeave = list.reduce((acc, pug) => {\n      const isInPug = pug.findPlayer(user);\n      if (isInPug) {\n        acc.push(pug.name);\n      }\n      return acc;\n    }, []);\n    if (listToLeave.length === 0) {\n      return channel.send(\n        `Cannot leave pug(s) if you haven't joined any :head_bandage:`\n      );\n    }\n    leaveGameTypes(message, listToLeave, serverId, user, hasGoneOffline);\n  } catch (error) {\n    message.channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const addCaptain = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const forWhichPug = list.find(pug => {\n      const isCandidate = pug.picking && !pug.areCaptainsDecided();\n      if (isCandidate) {\n        return pug.players.some(u => u.id === id); // check whether the guy is present there\n      }\n      return false;\n    });\n\n    if (!forWhichPug)\n      return channel.send(\n        'There was no filled pug for which you could captain'\n      );\n\n    if (!forWhichPug.players.some(u => u.id === id && u.captain === null))\n      return channel.send(`**${username}** is already a captain`);\n\n    const user = { id, username };\n    const result = forWhichPug.addCaptain(user);\n    channel.send(formatAddCaptainStatus(user, result));\n    // TODO Broadcast captains decided\n    if (result.captainsDecided) {\n      // emit\n      pugEventEmitter.emit(pugEvents.captainsReady, serverId, forWhichPug.name);\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const pickPlayer = async (\n  { channel },\n  [index, ...args],\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const playerIndex = parseInt(index);\n    if (!playerIndex) return;\n\n    const forWhichPug = list.find(pug => {\n      if (pug.picking) {\n        return pug.players.some(u => u.id === id && u.captain !== null); // check whether the guy is present there\n      }\n      return false;\n    });\n\n    if (!forWhichPug)\n      return channel.send(\n        'Cannot pick if you are not a captain in a pug :head_bandage: '\n      );\n\n    if (!forWhichPug.areCaptainsDecided())\n      return channel.send('Please wait until all captains have been decided');\n\n    const { team } = forWhichPug.players.find(\n      u => (u.id === id) & (u.captain !== null)\n    );\n    const { pickingOrder, turn, name } = forWhichPug;\n\n    if (team !== pickingOrder[turn])\n      return channel.send('Please wait for your turn :pouting_cat: ');\n\n    if (playerIndex < 1 || playerIndex > forWhichPug.players.length)\n      return channel.send('Invalid pick');\n\n    if (forWhichPug.players[playerIndex - 1].team !== null) {\n      const alreadyPicked = forWhichPug.players[playerIndex - 1];\n      return channel.send(`${alreadyPicked.username} is already picked`);\n    }\n\n    const result = forWhichPug.pickPlayer(playerIndex - 1, pickingOrder[turn]);\n    channel.send(formatPickPlayerStatus({ ...result, pug: forWhichPug }));\n\n    // TODO If finished, save stats to DB and remove from redux\n    if (result.finished) {\n      new Pugs({\n        server_id: serverId,\n        name: forWhichPug.name,\n        pug: forWhichPug,\n        timestamp: new Date(),\n      }).save();\n\n      const players = forWhichPug.players;\n\n      players.forEach(({ id, username, pick, captain, stats }) => {\n        let updatedStats = {};\n        const existingStats = stats[forWhichPug.name];\n        if (!existingStats) {\n          updatedStats = {\n            totalRating: pick,\n            totalCaptain: captain ? 1 : 0,\n            totalPugs: 1,\n          };\n        } else {\n          updatedStats = {\n            totalRating:\n              (existingStats.totalRating + pick) /\n              (existingStats.totalPugs + 1),\n            totalCaptain: existingStats.totalCaptain + 1,\n            totalPugs: existingStats.totalPugs + 1,\n          };\n        }\n\n        Users.findOneAndUpdate(\n          { id, server_id: serverId },\n          {\n            $set: {\n              username,\n              last_pug: forWhichPug,\n              stats: { ...stats, [forWhichPug.name]: updatedStats },\n            },\n          },\n          {\n            upsert: true,\n          }\n        ).exec();\n      });\n\n      store.dispatch(removePug({ serverId, name }));\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const pugPicking = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const pugsInPicking = list.filter(\n      pug => pug.picking && pug.areCaptainsDecided()\n    );\n\n    if (pugsInPicking.length === 0) {\n      return channel.send('There are no pugs in picking mode');\n    }\n\n    channel.send(formatPugsInPicking(pugsInPicking));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const promoteAvailablePugs = ({ channel }, args, serverId, _) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    list.length > 0\n      ? channel.send(formatPromoteAvailablePugs(list, channel.guild.name))\n      : channel.send('There are no active pugs to promote. Try joining one!');\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\n/**\n * A D M I N\n * C O M M A N D S\n */\n\nexport const adminAddPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    joinGameTypes({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const adminRemovePlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    leaveGameTypes({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const adminPickPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    pickPlayer({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n"],"file":"pugHandlers.js"}