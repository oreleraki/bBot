{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["addGameType","serverId","channel","gameName","noOfPlayers","noOfTeams","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","name","toLowerCase","pickingOrder","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","filter","listGameTypes","_","__","pugChannel","id","gamesList","map","toUpperCase","players","maxPlayers","guild","joinGameTypes","args","username","list","isPartOfFilledPug","find","p","picking","u","findOne","results","i","length","game"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,8BAGzBC,QAHyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,OADuB,QACvBA,OADuB;AAAA,8CAExBC,QAFwB,aAEdC,WAFc,aAEDC,SAFC;AAIvBC,YAAAA,KAJuB,SAIvBA,KAJuB;AAAA;;AAAA,gBAOlB,8BAAkBC,0BAAlB,EAAmCD,KAAnC,CAPkB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAQnBE,KAAK,CAACJ,WAAD,CAAL,IAAsBI,KAAK,CAACH,SAAD,CAA3B,IAA0C,CAACF,QARxB;AAAA;AAAA;AAAA;;AAAA,6CASdD,OAAO,CAACO,IAAR,CAAa,iBAAb,CATc;;AAAA;AAWjBC,YAAAA,KAXiB,GAWTC,kBAAMC,QAAN,EAXS;AAYfC,YAAAA,SAZe,GAYDH,KAAK,CAACI,IAAN,CAAWb,QAAX,CAZC,CAYfY,SAZe;;AAAA,iBAcnBA,SAAS,CAACE,IAAV,CAAe,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,KAAWd,QAAQ,CAACe,WAAT,EAAf;AAAA,aAAhB,CAdmB;AAAA;AAAA;AAAA;;AAAA,6CAedhB,OAAO,CAACO,IAAR,CAAa,yBAAb,CAfc;;AAAA;AAiBjBU,YAAAA,YAjBiB,GAiBF,gCACnBC,QAAQ,CAAChB,WAAD,CADW,EAEnBgB,QAAQ,CAACf,SAAD,CAFW,CAjBE;AAsBjBgB,YAAAA,WAtBiB,GAsBH;AAClBJ,cAAAA,IAAI,EAAEd,QAAQ,CAACe,WAAT,EADY;AAElBC,cAAAA,YAAY,EAAZA,YAFkB;AAGlBf,cAAAA,WAAW,EAAEgB,QAAQ,CAAChB,WAAD,CAHH;AAIlBC,cAAAA,SAAS,EAAEe,QAAQ,CAACf,SAAD;AAJD,aAtBG;AAAA;AAAA,mBA6BjBiB,kBAAUC,gBAAV,CACJ;AAAEC,cAAAA,SAAS,EAAEvB;AAAb,aADI,EAEJ;AAAEwB,cAAAA,KAAK,EAAE;AAAEC,gBAAAA,UAAU,EAAEL;AAAd;AAAT,aAFI,EAGJM,IAHI,EA7BiB;;AAAA;AAiCvBhB,8BAAMiB,QAAN,CACE,8BAAgB;AAAE3B,cAAAA,QAAQ,EAARA,QAAF;AAAYY,cAAAA,SAAS,+BAAMa,UAAN,IAAkBL,WAAlB;AAArB,aAAhB,CADF;;AAIAnB,YAAAA,OAAO,CAACO,IAAR,aAAkBN,QAAlB;AArCuB;AAAA;;AAAA;AAAA;AAAA;AAuCvBD,YAAAA,OAAO,CAACO,IAAR,CAAa,sBAAb;AACAoB,YAAAA,OAAO,CAACC,GAAR;;AAxCuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAX9B,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AA4CA,IAAM+B,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,gCAGzB9B,QAHyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,OADuB,SACvBA,OADuB;AAAA,sCAExBC,QAFwB,cAEX6B,IAFW;AAIvB1B,YAAAA,KAJuB,SAIvBA,KAJuB;AAAA;;AAAA,gBAOlB,8BAAkBC,0BAAlB,EAAmCD,KAAnC,CAPkB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AASjBI,YAAAA,KATiB,GASTC,kBAAMC,QAAN,EATS;AAUfC,YAAAA,SAVe,GAUDH,KAAK,CAACI,IAAN,CAAWb,QAAX,CAVC,CAUfY,SAVe;;AAAA,gBAYlBA,SAAS,CAACE,IAAV,CAAe,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,KAAWd,QAAQ,CAACe,WAAT,EAAf;AAAA,aAAhB,CAZkB;AAAA;AAAA;AAAA;;AAAA,8CAadhB,OAAO,CAACO,IAAR,CAAa,wBAAb,CAbc;;AAAA;AAejBwB,YAAAA,gBAfiB,GAeEpB,SAAS,CAACqB,MAAV,CACvB,UAAAlB,CAAC;AAAA,qBAAIA,CAAC,CAACC,IAAF,KAAWd,QAAQ,CAACe,WAAT,EAAf;AAAA,aADsB,CAfF;AAAA;AAAA,mBAmBjBI,kBAAUC,gBAAV,CACJ;AAAEC,cAAAA,SAAS,EAAEvB;AAAb,aADI,EAEJ;AAAEyB,cAAAA,UAAU,EAAEO;AAAd,aAFI,EAGJN,IAHI,EAnBiB;;AAAA;AAuBvBhB,8BAAMiB,QAAN,CAAe,8BAAgB;AAAE3B,cAAAA,QAAQ,EAARA,QAAF;AAAYY,cAAAA,SAAS,EAAEoB;AAAvB,aAAhB,CAAf;;AAEA/B,YAAAA,OAAO,CAACO,IAAR,aAAkBN,QAAlB;AAzBuB;AAAA;;AAAA;AAAA;AAAA;AA2BvBD,YAAAA,OAAO,CAACO,IAAR,CAAa,sBAAb;AACAoB,YAAAA,OAAO,CAACC,GAAR;;AA5BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXC,WAAW;AAAA;AAAA;AAAA,GAAjB;;;;AAgCA,IAAMI,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,0BAAoBC,CAApB,EAAuBnC,QAAvB,EAAiCoC,EAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAASnC,YAAAA,OAAT,UAASA,OAAT;AAAA;AAEnBQ,YAAAA,KAFmB,GAEXC,kBAAMC,QAAN,EAFW;AAAA,mCAGSF,KAAK,CAACI,IAAN,CAAWb,QAAX,CAHT,EAGjBqC,UAHiB,wBAGjBA,UAHiB,EAGLzB,SAHK,wBAGLA,SAHK;;AAAA,kBAKrByB,UAAU,KAAKpC,OAAO,CAACqC,EALF;AAAA;AAAA;AAAA;;AAAA,8CAMhBrC,OAAO,CAACO,IAAR,wCAA6C6B,UAA7C,OANgB;;AAAA;AAQnBE,YAAAA,SARmB,GAQP3B,SAAS,CAAC4B,GAAV,CAAc,UAAAzB,CAAC,EAAI;AACnC,qBAAO;AACLC,gBAAAA,IAAI,EAAED,CAAC,CAACC,IAAF,CAAOyB,WAAP,EADD;AAELC,gBAAAA,OAAO,EAAE,CAFJ;AAGLC,gBAAAA,UAAU,EAAE5B,CAAC,CAACZ;AAHT,eAAP;AAKD,aANiB,CARO;AAgBzBF,YAAAA,OAAO,CAACO,IAAR,CAAa,kCAAoBP,OAAO,CAAC2C,KAAR,CAAc5B,IAAlC,EAAwCuB,SAAxC,CAAb;AAhByB;AAAA;;AAAA;AAAA;AAAA;AAkBzBtC,YAAAA,OAAO,CAACO,IAAR,CAAa,sBAAb;AACAoB,YAAAA,OAAO,CAACC,GAAR;;AAnByB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbK,aAAa;AAAA;AAAA;AAAA,GAAnB;;;;AAuBA,IAAMW,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG,0BAE3BC,IAF2B,EAG3B9C,QAH2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AACzBC,YAAAA,OADyB,UACzBA,OADyB;AAIzBqC,YAAAA,EAJyB,UAIzBA,EAJyB,EAIrBS,QAJqB,UAIrBA,QAJqB,EAIX1C,KAJW,UAIXA,KAJW;AAMrBI,YAAAA,KANqB,GAMbC,kBAAMC,QAAN,EANa;AAAA,oCAOEF,KAAK,CAACI,IAAN,CAAWb,QAAX,CAPF,EAOnBqC,UAPmB,yBAOnBA,UAPmB,EAOPW,IAPO,yBAOPA,IAPO;;AAAA,kBASvBX,UAAU,KAAKpC,OAAO,CAACqC,EATA;AAAA;AAAA;AAAA;;AAAA,8CAUlBrC,OAAO,CAACO,IAAR,wCAA6C6B,UAA7C,OAVkB;;AAAA;AAAA,gBActBC,EAdsB;AAAA;AAAA;AAAA;;AAAA,8CAcXrC,OAAO,CAACO,IAAR,CAAa,uBAAb,CAdW;;AAAA;AAgBrByC,YAAAA,iBAhBqB,GAgBDD,IAAI,CAACE,IAAL,CACxB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACC,OAAF,IAAaD,CAAC,CAACT,OAAF,CAAU5B,IAAV,CAAe,UAAAuC,CAAC;AAAA,uBAAIA,CAAC,CAACf,EAAF,KAASA,EAAb;AAAA,eAAhB,CAAjB;AAAA,aADuB,CAhBC;;AAAA,iBAoBvBW,iBApBuB;AAAA;AAAA;AAAA;;AAAA,8CAqBlBhD,OAAO,CAACO,IAAR,0BACayC,iBAAiB,CAACjC,IAAlB,CAAuByB,WAAvB,EADb,iCArBkB;;AAAA;AAAA;AAAA,mBAyBOpB,kBAAUiC,OAAV,CAAkB;AAClD/B,cAAAA,SAAS,EAAEvB;AADuC,aAAlB,EAE/B0B,IAF+B,EAzBP;;AAAA;AAAA;AAAA,uCAyBnBD,UAzBmB;AAyBnBA,YAAAA,UAzBmB,kCAyBN,EAzBM;AA6BvB8B,YAAAA,OA7BuB,GA6Bb,EA7Ba;;AA8B3B,iBAASC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGV,IAAI,CAACW,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAC9BE,cAAAA,IAD8B,GACvBZ,IAAI,CAACU,CAAD,CAAJ,CAAQvC,WAAR,EADuB;AAErC;;AAhC0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAb4B,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import store from '../store';\nimport { GameTypes } from '../models';\nimport { computePickingOrder, hasPrivilegedRole } from '../utils';\nimport { privilegedRoles } from '../constants';\nimport { formatListGameTypes } from '../formats';\nimport { assignGameTypes } from '../store/actions';\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...game_types, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const gamesList = gameTypes.map(g => {\n      return {\n        name: g.name.toUpperCase(),\n        players: 0,\n        maxPlayers: g.noOfPlayers,\n      };\n    });\n\n    channel.send(formatListGameTypes(channel.guild.name, gamesList));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  const state = store.getState();\n  const { pugChannel, list } = state.pugs[serverId];\n\n  if (pugChannel !== channel.id)\n    return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n  // TODO args length 0 (default join with .j)\n\n  if (!id) return channel.send('No user was mentioned');\n\n  const isPartOfFilledPug = list.find(\n    p => p.picking && p.players.some(u => u.id === id)\n  );\n\n  if (isPartOfFilledPug)\n    return channel.send(\n      `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n    );\n\n  const { game_types = [] } = await GameTypes.findOne({\n    server_id: serverId,\n  }).exec();\n\n  let results = [];\n  for (let i = 0; i < args.length; i++) {\n    const game = args[i].toLowerCase();\n  }\n};\n"],"file":"pugHandlers.js"}