{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["pugEventEmitter","events","EventEmitter","Pug","name","noOfPlayers","noOfTeams","pickingOrder","turn","picking","players","captains","timer","user","findPlayer","push","team","captain","pick","tag","rating","stats","totalRating","playerIndex","findIndex","p","id","splice","stopPug","serverId","setTimeout","remaining","length","playersWithoutCaptain","filter","poolForCaptains","slice","sort","a","b","leastDiff","Number","MAX_SAFE_INTEGER","pair","i","left","diff","Math","abs","right","smallest","min","firstCaptain","secondCaptain","strongCaptain","weakCaptain","strongPlayersCount","reduce","acc","strongPlayerRatingThreshold","strongPlayerPercentage","fillCaptainSpot","find","u","otherCaptainIndex","otherCaptain","otherCaptainTeam","pIndex","didFillSpot","emit","pugEvents","captainsReady","captainTimeout","teamIndex","areCaptainsDecided","clearTimeout","captainsDecided","pickedPlayers","player","lastPlayerIndex","lastPlayerTeam","finished","forEach","fillPug","cleanup","Boolean","addGameType","channel","gameName","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","toLowerCase","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","listGameTypes","__","gameType","pugChannel","list","validGameType","existingPug","toUpperCase","tempList","map","maxPlayers","gamesList","curr","guild","listAllCurrentGameTypes","_","joinGameTypes","args","username","isInvisible","client","blockedList","blocks","isPartOfFilledPug","Users","findOne","db_user","toBroadcast","statuses","game","joined","pug","hasFilledBeforeJoining","addPlayer","hasFilledAfterJoining","newPug","activeCount","allLeaveMsgs","op","allPugLeaveMsgs","j","leaveGameTypes","msg","DM_title","DM_body","users","get","setDefaultJoin","allJoins","undefined","defaultJoins","$set","default_joins","upsert","decideDefaultOrJoin","prefix","isOffline","returnStatus","isInPug","removePlayer","deadPugs","isEmpty","leaveStatus","leaveAllGameTypes","message","hasGoneOffline","offline","listToLeave","emojis","smart","addCaptain","forWhichPug","isCandidate","result","pickPlayer","index","alreadyPicked","Pugs","timestamp","Date","save","bulkWrite","existingStats","totalCaptain","totalPugs","updateOne","update","last_pug","ordered","pugPicking","pugsInPicking","promoteAvailablePugs","hasPugMentioned","checkLastPugs","action","split","tCount","digits","match","howMany","pugArg","results","limit","skip","found","guildName","winner","resetPug","pugName","decidePromoteOrPick","includes","checkStats","mentionedUser","addOrRemoveTag","isAddingTag","join","tagLength","whichPugs","addTag","removeTag","adminAddPlayer","adminRemovePlayer","adminPickPlayer","blockPlayer","pugList","timeframe","reason","blockLengthString","blockPeriodString","blockCalculator","m","minutes","dt","setMinutes","getMinutes","h","hours","setHours","getHours","d","days","blockLength","expirationDate","newBlockedUser","blocked_on","expires_at","Blocks","blocked_users","blockedUser","removedMsg","removedPugs","finalMsg","bannechu","toGMTString","unblockPlayer","isBot","newBlockedList","unblockedUserId","showBlockedUsers","author","declareWinner","which","wTeam","changeWinner","winningTeam","teamIndexes","_id","updatedPug","$inc","updated","getTop10","gameTypeArg","allPlayers","gameTypeName","top10","won","lost","winP","points","Jimp","read","then","template","FONTS","arialFNT","ubuntuFNT","ubuntuTTF","Y","MAX_HEIGHT","toFixed","replace","shouldUseUbuntu","every","hasGlyphForCodePoint","codePointAt","print","text","alignmentX","HORIZONTAL_ALIGN_CENTER","alignmentY","VERTICAL_ALIGN_MIDDLE","toString","imageName","now","write","files","fs","unlinkSync","error"],"mappings":"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","sourcesContent":["import store from '../store';\nimport { GameTypes, Pugs, Users, Blocks } from '../models';\nimport {\n  computePickingOrder,\n  hasPrivilegedRole,\n  shuffle,\n  getRandomInt,\n  sanitizeName,\n} from '../utils';\nimport {\n  privilegedRoles,\n  captainTimeout,\n  offline,\n  pugEvents,\n  tagLength,\n  prefix,\n  emojis,\n  strongPlayerRatingThreshold,\n  teamIndexes,\n} from '../constants';\nimport {\n  formatListGameTypes,\n  formatJoinStatus,\n  formatLeaveStatus,\n  formatBroadcastPug,\n  formatListAllCurrentGameTypes,\n  formatAddCaptainStatus,\n  formatPugsInPicking,\n  formatDeadPugs,\n  formatPickPlayerStatus,\n  formatPromoteAvailablePugs,\n  formatLastPugStatus,\n  formatUserStats,\n  formatListGameType,\n} from '../formats';\nimport {\n  assignGameTypes,\n  addNewPug,\n  removePug,\n  addBlock,\n  removeBlock,\n} from '../store/actions';\nimport events from 'events';\nimport fs from 'fs';\nimport Jimp from 'jimp';\nimport { FONTS } from '../fonts';\n\nexport const pugEventEmitter = new events.EventEmitter();\n\nclass Pug {\n  constructor({ name, noOfPlayers, noOfTeams, pickingOrder }) {\n    this.name = name;\n    this.noOfPlayers = noOfPlayers;\n    this.noOfTeams = noOfTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.players = [];\n    this.captains = [];\n    this.timer = null;\n  }\n\n  // 0 if couldn't join, 1 if joined, 2 if already in\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.findPlayer(user)) return 2;\n      this.players.push({\n        team: null,\n        captain: null,\n        pick: null,\n        tag: null,\n        rating: user.stats[this.name] ? user.stats[this.name].totalRating : 0,\n        ...user,\n      });\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(user) {\n    const playerIndex = this.players.findIndex(p => p.id === user.id);\n    this.players.splice(playerIndex, 1);\n    if (this.picking) this.stopPug();\n  }\n\n  fillPug(serverId) {\n    this.picking = true;\n    this.timer = setTimeout(() => {\n      const remaining = this.noOfPlayers - this.captains.length;\n      const playersWithoutCaptain = this.players.filter(\n        p => p.captain === null\n      );\n      const poolForCaptains = shuffle(playersWithoutCaptain)\n        .slice(0, remaining * 0.6)\n        .sort((a, b) => a.rating - b.rating);\n\n      if (this.noOfTeams === 2) {\n        if (this.captains.length === 0) {\n          let leastDiff = Number.MAX_SAFE_INTEGER;\n          let pair = [0, 1];\n          for (let i = 1; i < poolForCaptains.length - 1; i++) {\n            const left = {\n              pair: [i, i - 1],\n              diff: Math.abs(\n                poolForCaptains[i].rating - poolForCaptains[i - 1].rating\n              ),\n            };\n            const right = {\n              pair: [i, i + 1],\n              diff: Math.abs(\n                poolForCaptains[i].rating - poolForCaptains[i + 1].rating\n              ),\n            };\n\n            const smallest = Math.min(left.diff, right.diff);\n            if (smallest === left.diff && smallest <= leastDiff) {\n              leastDiff = left.diff;\n              pair = left.pair;\n            } else if (smallest === right.diff && smallest <= leastDiff) {\n              leastDiff = right.diff;\n              pair = right.pair;\n            }\n          }\n          const firstCaptain = poolForCaptains[pair[0]];\n          const secondCaptain = poolForCaptains[pair[1]];\n\n          let strongCaptain, weakCaptain; // with respect to each other\n          if (firstCaptain.rating <= secondCaptain.rating) {\n            strongCaptain = firstCaptain;\n            weakCaptain = secondCaptain;\n          } else {\n            strongCaptain = secondCaptain;\n            weakCaptain = firstCaptain;\n          }\n\n          const strongPlayersCount = this.players.reduce((acc, user) => {\n            if (user.rating <= strongPlayerRatingThreshold) acc = acc + 1;\n            return acc;\n          }, 0);\n\n          const strongPlayerPercentage =\n            strongPlayersCount / this.players.length;\n\n          // 4-5 strong players\n          if (strongPlayerPercentage >= 0.4 && strongPlayerPercentage <= 0.5) {\n            this.fillCaptainSpot(strongCaptain, 0);\n            this.fillCaptainSpot(weakCaptain, 1);\n          } else if (\n            strongPlayerPercentage < 0.4 ||\n            strongPlayerPercentage > 0.5\n          ) {\n            // less than 4 strong players total in the pug or more than 5 strong players\n            this.fillCaptainSpot(weakCaptain, 0);\n            this.fillCaptainSpot(strongCaptain, 1);\n          }\n        } else {\n          // 1 capt already there\n          const firstCaptain = this.players.find(u => u.captain !== null);\n          let leastDiff = 10000;\n          let otherCaptainIndex = null;\n          for (let i = 0; i < poolForCaptains.length; i++) {\n            const diff = Math.abs(\n              firstCaptain.rating - poolForCaptains[i].rating\n            );\n            if (diff <= leastDiff) {\n              leastDiff = diff;\n              otherCaptainIndex = i;\n            }\n          }\n\n          const otherCaptain = poolForCaptains[otherCaptainIndex];\n          const otherCaptainTeam = Math.abs((firstCaptain.team % 2) - 1);\n          this.fillCaptainSpot(otherCaptain, otherCaptainTeam);\n        }\n      } else {\n        // more than 2 capts\n        for (let i = 0; i < this.noOfTeams; i++) {\n          if (this.captains[i]) continue;\n          while (1) {\n            const pIndex = getRandomInt(0, poolForCaptains.length - 1);\n            const didFillSpot = this.fillCaptainSpot(\n              poolForCaptains[pIndex],\n              i\n            );\n            if (didFillSpot) break;\n          }\n        }\n      }\n\n      pugEventEmitter.emit(pugEvents.captainsReady, serverId, this.name);\n      //  TODO\n    }, captainTimeout);\n  }\n\n  addCaptain(user) {\n    let teamIndex;\n    while (1) {\n      teamIndex = getRandomInt(0, this.noOfTeams - 1);\n      const didFillSpot = this.fillCaptainSpot(user, teamIndex);\n      if (didFillSpot) break;\n    }\n\n    if (this.areCaptainsDecided()) clearTimeout(this.timer);\n    return {\n      team: teamIndex,\n      captainsDecided: this.areCaptainsDecided(),\n    };\n  }\n\n  fillCaptainSpot(user, teamIndex) {\n    const pIndex = this.players.findIndex(u => u.id === user.id);\n    if (this.players[pIndex].captain === null && !this.captains[teamIndex]) {\n      this.players[pIndex].captain = this.players[pIndex].team = teamIndex;\n      this.players[pIndex].pick = 0;\n      this.captains[teamIndex] = this.players[pIndex];\n      return true;\n    }\n    return false;\n  }\n\n  pickPlayer(playerIndex, team) {\n    if (this.players[playerIndex].team === null) {\n      this.players[playerIndex].team = team;\n      this.turn += 1;\n      this.players[playerIndex].pick = this.turn;\n\n      let pickedPlayers = [{ player: this.players[playerIndex], team }];\n      // last pick automatically goes\n      if (this.turn === this.pickingOrder.length - 1) {\n        const lastPlayerIndex = this.players.findIndex(u => u.team === null);\n        const lastPlayerTeam = this.pickingOrder[this.turn];\n\n        this.players[lastPlayerIndex].team = lastPlayerTeam;\n        this.turn += 1;\n        this.players[lastPlayerIndex].pick = this.turn;\n        // pug ends\n        this.picking = false;\n        pickedPlayers.push({\n          player: this.players[lastPlayerIndex],\n          team: lastPlayerTeam,\n        });\n        return {\n          pickedPlayers,\n          finished: true,\n        };\n      }\n      return {\n        pickedPlayers,\n        finished: false,\n      };\n    }\n  }\n\n  addTag(user, tag) {\n    this.players.forEach(u => {\n      if (u.id === user.id) {\n        u.tag = tag;\n      }\n    });\n  }\n\n  removeTag(user) {\n    this.players.forEach(u => {\n      if (u.id === user.id) {\n        u.tag = null;\n      }\n    });\n  }\n\n  resetPug(serverId) {\n    this.stopPug();\n    this.fillPug(serverId);\n  }\n\n  stopPug() {\n    this.cleanup();\n  }\n\n  findPlayer(user) {\n    return this.players.find(u => u.id === user.id);\n  }\n\n  isEmpty() {\n    return this.players.length === 0 ? true : false;\n  }\n\n  areCaptainsDecided() {\n    return this.captains.filter(Boolean).length === this.noOfTeams;\n  }\n\n  cleanup() {\n    //  TODO\n    this.picking = false;\n    this.turn = 0;\n    this.captains = [];\n    this.players.forEach(user => (user.captain = user.team = user.pick = null));\n    clearTimeout(this.timer);\n  }\n}\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    if (!pickingOrder)\n      return channel.send(\n        'Invalid No. of players/teams. Picking order cannot be computed'\n      );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...gameTypes, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, [gameType], serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        }`\n      );\n\n    if (gameType) {\n      const validGameType = gameTypes.find(\n        g => g.name === gameType.toLowerCase()\n      );\n      if (!validGameType)\n        return channel.send(`There is no such active pug: **${gameType}**`);\n\n      const existingPug = list.find(p => p.name === gameType.toLowerCase());\n      if (!existingPug)\n        return channel.send(\n          `**${gameType.toUpperCase()}** (0/${validGameType.noOfPlayers})`\n        );\n\n      channel.send(formatListGameType(existingPug));\n    } else {\n      const tempList = gameTypes.map(g => {\n        return {\n          name: g.name,\n          players: 0,\n          maxPlayers: g.noOfPlayers,\n        };\n      });\n\n      const gamesList = tempList.reduce((acc, curr) => {\n        const existingPug = list.find(p => p.name === curr.name);\n        if (existingPug) {\n          acc.push({\n            name: existingPug.name,\n            maxPlayers: existingPug.noOfPlayers,\n            players: existingPug.players.length,\n          });\n        } else {\n          acc.push(curr);\n        }\n        return acc;\n      }, []);\n\n      channel.send(formatListGameTypes(channel.guild.name, gamesList));\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listAllCurrentGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    channel.send(formatListAllCurrentGameTypes(list, channel.guild.name));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles, isInvisible, client }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n    const { list: blockedList } = state.blocks[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    // TODO args length 0 (default join with .j)\n    if (isInvisible)\n      return channel.send(`Cannot use this command while invisible`);\n\n    if (!id) return channel.send('No user was mentioned');\n\n    if (blockedList.some(u => u.id === id))\n      return channel.send(`Not allowed to join pugs`);\n\n    const isPartOfFilledPug = list.find(\n      p => p.picking && p.players.some(u => u.id === id)\n    );\n\n    if (isPartOfFilledPug)\n      return channel.send(\n        `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n      );\n\n    const db_user = await Users.findOne({ server_id: serverId, id: id }).exec();\n\n    let toBroadcast = null;\n    const user = {\n      id,\n      username,\n      stats: db_user && db_user.stats ? db_user.stats : {},\n    };\n    const statuses = args.map(a => {\n      if (!toBroadcast) {\n        const game = a.toLowerCase();\n        const gameType = gameTypes.find(g => g.name === game);\n\n        if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n        const existingPug = list.find(p => p.name === game);\n        const pug = existingPug || new Pug(gameType);\n\n        const hasFilledBeforeJoining = pug.picking;\n        const joined = pug.addPlayer(user);\n        pug.players.length === pug.noOfPlayers && !pug.picking\n          ? pug.fillPug(serverId)\n          : null;\n        const hasFilledAfterJoining = pug.picking;\n\n        if (!hasFilledBeforeJoining && hasFilledAfterJoining) {\n          toBroadcast = pug;\n        }\n\n        if (!existingPug && joined) {\n          store.dispatch(addNewPug({ serverId, newPug: pug }));\n        }\n\n        return {\n          user,\n          joined,\n          name: game,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n    });\n    channel.send(formatJoinStatus(statuses.filter(Boolean)));\n    if (toBroadcast) {\n      let allLeaveMsgs = ``;\n      for (let i = 0; i < list.length; i++) {\n        const op = list[i];\n        if (op.name !== toBroadcast.name) {\n          let allPugLeaveMsgs = ``;\n          for (let j = 0; j < toBroadcast.players.length; j++) {\n            const player = toBroadcast.players[j];\n            if (op.findPlayer(player)) {\n              const msg = await leaveGameTypes(\n                { channel },\n                [op.name],\n                serverId,\n                player,\n                null,\n                true\n              );\n              allPugLeaveMsgs += `${msg} `;\n            }\n          }\n          allLeaveMsgs += `${allPugLeaveMsgs} \\n`;\n        }\n      }\n\n      allLeaveMsgs && channel.send(allLeaveMsgs);\n      channel.send(formatBroadcastPug(toBroadcast));\n\n      // Send DM to each user\n      const DM_title = `**${toBroadcast.name.toUpperCase()}** filled in **${\n        channel.guild.name\n      }**. Players are,`;\n      const DM_body = toBroadcast.players.reduce((acc, curr) => {\n        acc += `:small_blue_diamond: ${curr.username} `;\n        return acc;\n      }, ``);\n\n      toBroadcast.players.forEach(player => {\n        const user = client.users.get(player.id);\n        if (user) {\n          user.send(`${DM_title}\\n${DM_body}`);\n        }\n      });\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const setDefaultJoin = async (\n  { channel },\n  args,\n  serverId,\n  { id, username }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const allJoins = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return undefined;\n      return game;\n    });\n\n    const defaultJoins = allJoins.filter(Boolean);\n    if (defaultJoins.length > 0) {\n      await Users.findOneAndUpdate(\n        { id, server_id: serverId },\n        {\n          $set: {\n            server_id: serverId,\n            default_joins: defaultJoins,\n            id,\n            username,\n          },\n        },\n        {\n          upsert: true,\n        }\n      ).exec();\n\n      channel.send('Default join set!');\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const decideDefaultOrJoin = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles, isInvisible, client }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n    // like .j siege5 or .join 4way\n    if (args.length > 0) {\n      return joinGameTypes({ channel }, args, serverId, {\n        id,\n        username,\n        roles,\n        isInvisible,\n        client,\n      });\n    }\n\n    // just .j case\n    const db_user = await Users.findOne({ server_id: serverId, id: id }).exec();\n\n    if (\n      !db_user ||\n      !db_user.default_joins ||\n      db_user.default_joins.length === 0\n    )\n      return channel.send(\n        `No defaultjoin set. Type **${prefix}defaultjoin gametypes** to set it!`\n      );\n\n    return joinGameTypes({ channel }, db_user.default_joins, serverId, {\n      id,\n      username,\n      roles,\n      isInvisible,\n      client,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles },\n  isOffline,\n  returnStatus\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!id) return channel.send('No user was mentioned');\n    if (args.length === 0)\n      return channel.send('Invalid, No pugs were mentioned');\n\n    const user = { id, username };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, left: -1 }; // -1 is for NOT FOUND\n\n      const pug = list.find(p => p.name === game);\n      const isInPug = pug && pug.findPlayer(user);\n      if (isInPug) {\n        pug.removePlayer(user);\n        return {\n          user,\n          pug,\n          name: game,\n          left: 1,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n      return { user, name: game, left: 0 };\n    });\n    // TODO Compute deadpugs\n    const deadPugs = statuses.reduce(\n      (acc, { user, pug, name, activeCount, maxPlayers }) => {\n        if (activeCount === maxPlayers - 1) {\n          acc.push({ pug, user });\n        }\n        if (pug && pug.isEmpty()) {\n          store.dispatch(removePug({ serverId, name }));\n        }\n        return acc;\n      },\n      []\n    );\n\n    const leaveStatus = formatLeaveStatus(statuses, isOffline);\n    if (returnStatus) return leaveStatus;\n\n    channel.send(leaveStatus);\n    deadPugs.length > 0 ? channel.send(formatDeadPugs(deadPugs)) : null;\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveAllGameTypes = async (message, args, serverId, user) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== message.channel.id)\n      return message.channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const hasGoneOffline = args[0] === offline;\n    const listToLeave = list.reduce((acc, pug) => {\n      const isInPug = pug.findPlayer(user);\n      if (isInPug) {\n        acc.push(pug.name);\n      }\n      return acc;\n    }, []);\n    if (listToLeave.length === 0) {\n      return message.channel.send(\n        `Cannot leave pug(s) if you haven't joined any ${emojis.smart}`\n      );\n    }\n    leaveGameTypes(message, listToLeave, serverId, user, hasGoneOffline);\n  } catch (error) {\n    message.channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const addCaptain = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const forWhichPug = list.find(pug => {\n      const isCandidate = pug.picking && !pug.areCaptainsDecided();\n      if (isCandidate) {\n        return pug.players.some(u => u.id === id); // check whether the guy is present there\n      }\n      return false;\n    });\n\n    if (!forWhichPug)\n      return channel.send(\n        'There was no filled pug for which you could captain'\n      );\n\n    if (!forWhichPug.players.some(u => u.id === id && u.captain === null))\n      return channel.send(`**${username}** is already a captain`);\n\n    const user = { id, username };\n    const result = forWhichPug.addCaptain(user);\n    channel.send(formatAddCaptainStatus(user, result));\n    // TODO Broadcast captains decided\n    if (result.captainsDecided) {\n      // emit\n      pugEventEmitter.emit(pugEvents.captainsReady, serverId, forWhichPug.name);\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const pickPlayer = async (\n  { channel },\n  [index, ...args],\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const playerIndex = parseInt(index);\n    if (!playerIndex) return;\n\n    const forWhichPug = list.find(pug => {\n      if (pug.picking) {\n        return pug.players.some(u => u.id === id && u.captain !== null); // check whether the guy is present there\n      }\n      return false;\n    });\n\n    if (!forWhichPug)\n      return channel.send(\n        `Cannot pick if you are not a captain in a pug ${emojis.smart} `\n      );\n\n    if (!forWhichPug.areCaptainsDecided())\n      return channel.send('Please wait until all captains have been decided');\n\n    const { team } = forWhichPug.players.find(\n      u => (u.id === id) & (u.captain !== null)\n    );\n    const { pickingOrder, turn, name } = forWhichPug;\n\n    if (team !== pickingOrder[turn])\n      return channel.send('Please wait for your turn :pouting_cat: ');\n\n    if (playerIndex < 1 || playerIndex > forWhichPug.players.length)\n      return channel.send('Invalid pick');\n\n    if (forWhichPug.players[playerIndex - 1].team !== null) {\n      const alreadyPicked = forWhichPug.players[playerIndex - 1];\n      return channel.send(`${alreadyPicked.username} is already picked`);\n    }\n\n    const result = forWhichPug.pickPlayer(playerIndex - 1, pickingOrder[turn]);\n    channel.send(formatPickPlayerStatus({ ...result, pug: forWhichPug }));\n\n    // SAVE STATS\n    if (result.finished) {\n      new Pugs({\n        server_id: serverId,\n        name: forWhichPug.name,\n        pug: forWhichPug,\n        timestamp: new Date(),\n      }).save();\n\n      const players = forWhichPug.players;\n\n      Users.bulkWrite(\n        players.map(({ id, username, pick, captain, stats }) => {\n          const existingStats = stats[forWhichPug.name];\n\n          if (!existingStats) {\n            const totalRating = pick;\n            const totalCaptain = captain !== null ? 1 : 0;\n            const totalPugs = 1;\n            return {\n              updateOne: {\n                filter: { id, server_id: serverId },\n                update: {\n                  $set: {\n                    username,\n                    last_pug: { ...forWhichPug, timestamp: new Date() },\n                    [`stats.${forWhichPug.name}.totalRating`]: totalRating,\n                    [`stats.${forWhichPug.name}.totalCaptain`]: totalCaptain,\n                    [`stats.${forWhichPug.name}.totalPugs`]: totalPugs,\n                  },\n                },\n                upsert: true,\n              },\n            };\n          } else {\n            const totalRating =\n              captain !== null\n                ? existingStats.totalRating\n                : (existingStats.totalRating *\n                    (existingStats.totalPugs - existingStats.totalCaptain) +\n                    pick) /\n                  (existingStats.totalPugs - existingStats.totalCaptain + 1);\n            const totalCaptain =\n              captain !== null\n                ? existingStats.totalCaptain + 1\n                : existingStats.totalCaptain;\n            const totalPugs = existingStats.totalPugs + 1;\n\n            return {\n              updateOne: {\n                filter: { id, server_id: serverId },\n                update: {\n                  $set: {\n                    username,\n                    last_pug: { ...forWhichPug, timestamp: new Date() },\n                    [`stats.${forWhichPug.name}.totalRating`]: totalRating,\n                    [`stats.${forWhichPug.name}.totalCaptain`]: totalCaptain,\n                    [`stats.${forWhichPug.name}.totalPugs`]: totalPugs,\n                  },\n                },\n                upsert: true,\n              },\n            };\n          }\n        }),\n        { ordered: false }\n      );\n\n      store.dispatch(removePug({ serverId, name }));\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const pugPicking = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const pugsInPicking = list.filter(\n      pug => pug.picking && pug.areCaptainsDecided()\n    );\n\n    if (pugsInPicking.length === 0) {\n      return channel.send('There are no pugs in picking mode');\n    }\n\n    channel.send(formatPugsInPicking(pugsInPicking));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const promoteAvailablePugs = async ({ channel }, args, serverId, _) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const hasPugMentioned =\n      args[0] && list.find(p => p.name === args[0].toLowerCase());\n\n    if (\n      hasPugMentioned &&\n      hasPugMentioned.players.length > 0 &&\n      !hasPugMentioned.picking\n    )\n      return channel.send(\n        formatPromoteAvailablePugs([hasPugMentioned], channel.guild.name)\n      );\n\n    !hasPugMentioned && list.length > 0\n      ? channel.send(formatPromoteAvailablePugs(list, channel.guild.name))\n      : channel.send('There are no active pugs to promote. Try joining one!');\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const checkLastPugs = async (\n  { channel },\n  args,\n  serverId,\n  { action }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const { tCount, digits } = action.split('').reduce(\n      (acc, curr) => {\n        acc.tCount += curr === 't' ? 1 : 0;\n        acc.digits += curr.match(/\\d/g) ? curr : '';\n        return acc;\n      },\n      { tCount: 0, digits: '' }\n    );\n\n    if (tCount > 1 && parseInt(digits) > 0)\n      return channel.send('Invalid command');\n\n    const howMany = parseInt(digits) > 0 ? parseInt(digits) : tCount;\n\n    const pugArg = args[0] && args[0].toLowerCase();\n    let results = null;\n    if (pugArg) {\n      results = await Pugs.find({ server_id: serverId, name: pugArg })\n        .sort({ timestamp: -1 })\n        .limit(1)\n        .skip(howMany - 1)\n        .exec();\n    } else {\n      results = await Pugs.find({ server_id: serverId })\n        .sort({ timestamp: -1 })\n        .limit(1)\n        .skip(howMany - 1)\n        .exec();\n    }\n\n    if (!results || results.length === 0)\n      return channel.send(\n        `No ${action} pug found ${\n          pugArg ? `for **${pugArg.toUpperCase()}**` : ``\n        }`\n      );\n\n    const found = results[0];\n    found &&\n      channel.send(\n        formatLastPugStatus(\n          { pug: found.pug, guildName: channel.guild.name },\n          action,\n          found.timestamp,\n          { winner: found.winner }\n        )\n      );\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const resetPug = async ({ channel }, args, serverId, { roles }) => {\n  if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n  const state = store.getState();\n  const { pugChannel, list } = state.pugs[serverId];\n\n  if (pugChannel !== channel.id)\n    return channel.send(\n      `Active channel for pugs is ${\n        pugChannel ? `<#${pugChannel}>` : `not present`\n      } <#${pugChannel}>`\n    );\n\n  const pugName = args[0].toLowerCase();\n  const forWhichPug = list.find(p => p.name === pugName);\n\n  if (!forWhichPug)\n    return channel.send(`No pug found: **${args[0].toUpperCase()}**`);\n  if (!forWhichPug.picking)\n    return channel.send(\n      `**${forWhichPug.name.toUpperCase()}** is not in picking mode yet`\n    );\n\n  forWhichPug.resetPug(serverId);\n  channel.send(formatBroadcastPug(forWhichPug));\n};\n\nexport const decidePromoteOrPick = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, action }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    // just p or promote\n    if (['p', 'promote'].includes(action) && !args[0])\n      return promoteAvailablePugs({ channel }, args, serverId, {\n        id,\n        username,\n      });\n\n    // p 4 or pick 7 or p siege5\n    if (['p', 'pick'].includes(action) && args[0]) {\n      // p 4 or p siege5\n      if (action === 'p') {\n        if (isNaN(args[0])) {\n          return promoteAvailablePugs({ channel }, args, serverId, {\n            id,\n            username,\n          });\n        }\n        return pickPlayer({ channel }, args, serverId, { id, username });\n      } else {\n        return pickPlayer({ channel }, args, serverId, { id, username });\n      }\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const checkStats = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, mentionedUser }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    const user = await Users.findOne({\n      server_id: serverId,\n      id: mentionedUser ? mentionedUser.id : id,\n    }).exec();\n\n    if (!user || !user.stats) {\n      return channel.send(\n        `There are no stats logged for **${\n          mentionedUser ? mentionedUser.username : username\n        }**`\n      );\n    }\n\n    channel.send(formatUserStats(user));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const addOrRemoveTag = async (\n  { channel },\n  args,\n  serverId,\n  { id, username }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    let tag = '';\n    const isAddingTag = Boolean(args[0]);\n\n    if (isAddingTag && args.join(' ').length > tagLength)\n      return channel.send(`Tags must be shorter than ${tagLength} characters`);\n\n    tag = sanitizeName(args.join(' '));\n\n    const whichPugs = list.filter(pug => pug.findPlayer({ id, username }));\n\n    if (whichPugs.length === 0) return;\n\n    whichPugs.forEach(pug => {\n      isAddingTag\n        ? pug.addTag({ id, username }, tag)\n        : pug.removeTag({ id, username });\n    });\n\n    isAddingTag\n      ? channel.send(`Your new tag is: **${tag}**`)\n      : channel.send(`Your tag has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\n/**\n * A D M I N\n * C O M M A N D S\n */\n\nexport const adminAddPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles, client }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    joinGameTypes({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n      client,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const adminRemovePlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    leaveGameTypes({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const adminPickPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    pickPlayer({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const blockPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles, mentionedUser }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list: pugList } = state.pugs[serverId];\n    const { list } = state.blocks[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    if (list.some(u => u.id === mentionedUser.id))\n      return channel.send(\n        `${mentionedUser.username} is already blocked from pugs`\n      );\n\n    const [timeframe, ...reason] = args.slice(1);\n    const [blockLengthString] = timeframe.match(/[0-9]+/g);\n    const [blockPeriodString] = timeframe.match(/[m|h|d]/g);\n    if (!blockLengthString || !blockPeriodString)\n      return channel.send('Please mention the length of the block');\n\n    const blockCalculator = {\n      m: minutes => {\n        const dt = new Date();\n        dt.setMinutes(dt.getMinutes() + minutes);\n        return dt;\n      },\n      h: hours => {\n        const dt = new Date();\n        dt.setHours(dt.getHours() + hours);\n        return dt;\n      },\n      d: days => {\n        const dt = new Date();\n        dt.setHours(dt.getHours() + days * 24);\n        return dt;\n      },\n    };\n    const blockLength = parseInt(blockLengthString);\n    if (blockLength < 0) return;\n\n    const expirationDate = blockCalculator[blockPeriodString](blockLength);\n    const newBlockedUser = {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n      blocked_on: new Date(),\n      expires_at: expirationDate,\n      reason: reason.join(' ') || '',\n    };\n\n    await Blocks.findOneAndUpdate(\n      { server_id: serverId },\n      { $set: { blocked_users: newBlockedUser } },\n      { upsert: true }\n    );\n    store.dispatch(addBlock({ serverId, blockedUser: newBlockedUser }));\n\n    // remove from pugs if joined\n    let removedMsg = ``;\n    let removedPugs = ``;\n    for (let i = 0; i < pugList.length; i++) {\n      if (pugList[i].findPlayer({ id: mentionedUser.id })) {\n        await leaveGameTypes(\n          { channel },\n          [pugList[i].name],\n          serverId,\n          { id: mentionedUser.id, username: mentionedUser.username },\n          null,\n          true\n        );\n        removedPugs += `**${pugList[i].name.toUpperCase()}** `;\n      }\n    }\n\n    if (removedPugs) {\n      removedMsg = `**${mentionedUser.username}** was removed from ${removedPugs}`;\n    }\n\n    const finalMsg = `${emojis.bannechu} **${\n      mentionedUser.username\n    }** has been blocked from joining pugs till __**${expirationDate.toGMTString()}**__ ${\n      emojis.bannechu\n    }\\n${removedMsg}`;\n\n    channel.send(finalMsg);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const unblockPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles, mentionedUser, isBot }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n    const { list } = state.blocks[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles) && !isBot) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    if (!list.some(u => u.id === mentionedUser.id))\n      return channel.send(\n        `cannot unblock **${mentionedUser.username}** if the user isn't blocked in the first place ${emojis.smart} `\n      );\n\n    const newBlockedList = list.filter(u => u.id !== mentionedUser.id);\n    await Blocks.findOneAndUpdate(\n      { server_id: serverId },\n      { $set: { blocked_users: newBlockedList } },\n      { upsert: true }\n    );\n    store.dispatch(\n      removeBlock({ serverId, unblockedUserId: mentionedUser.id })\n    );\n\n    channel.send(`**${mentionedUser.username}** has been unblocked`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const showBlockedUsers = async (\n  message,\n  _,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n    const { list = [] } = state.blocks[serverId];\n\n    if (pugChannel !== message.channel.id)\n      return message.channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    if (list.length === 0) {\n      message.author.send('There are no blocked users');\n      return message.channel.send('You have received a DM');\n    }\n\n    const msg = list.reduce((acc, curr, i) => {\n      acc += `${i > 0 ? ' • ' : ''} **${curr.username}** ${\n        curr.reason ? `(${curr.reason}) ` : ``\n      }block expires on **${curr.expires_at.toGMTString()}**`;\n      return acc;\n    }, ``);\n\n    message.author.send(\n      `${emojis.bannechu} List of Blocked Users ${emojis.bannechu}\\n${msg}`\n    );\n    message.channel.send('You have received a DM');\n  } catch (error) {\n    message.channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const declareWinner = async (\n  { channel },\n  [which, wTeam],\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const { tCount, digits } = which.split('').reduce(\n      (acc, curr) => {\n        acc.tCount += curr === 't' ? 1 : 0;\n        acc.digits += curr.match(/\\d/g) ? curr : '';\n        return acc;\n      },\n      { tCount: 0, digits: '' }\n    );\n\n    if (tCount > 1 && parseInt(digits) > 0)\n      return channel.send('Invalid command');\n\n    const howMany = parseInt(digits) > 0 ? parseInt(digits) : tCount;\n\n    const results = await Pugs.find({ server_id: serverId })\n      .sort({ timestamp: -1 })\n      .limit(1)\n      .skip(howMany - 1)\n      .exec();\n\n    if (!results || results.length === 0)\n      return channel.send(`No **${which}** pug found`);\n\n    const found = results[0];\n    if (!found) return channel.send(`No **${which}** pug found`);\n\n    let changeWinner = false;\n    const { pug } = found;\n    const winningTeam = teamIndexes[wTeam.toLowerCase()];\n\n    if (winningTeam === undefined || winningTeam > pug.noOfTeams - 1)\n      return channel.send('Invalid winning team');\n\n    if (found.winner === winningTeam)\n      return channel.send('Pug winner already set');\n\n    if (found.winner !== undefined) changeWinner = true; // change the previously set winner\n\n    const updatedPug = await Pugs.findOneAndUpdate(\n      { _id: found.id },\n      { $set: { winner: winningTeam } },\n      { new: true }\n    ).exec();\n\n    // todo, if same team winner, skip it, if different then reverse wins and loss\n    await Users.bulkWrite(\n      pug.players.map(({ id, team, username }) => {\n        return {\n          updateOne: {\n            filter: { id, server_id: serverId },\n            update: {\n              $inc: {\n                [`stats.${pug.name}.won`]:\n                  team === winningTeam ? 1 : changeWinner ? -1 : 0,\n                [`stats.${pug.name}.lost`]:\n                  team !== winningTeam ? 1 : changeWinner ? -1 : 0,\n              },\n              $set: { username },\n            },\n          },\n        };\n      }),\n      {\n        ordered: false,\n      }\n    );\n\n    channel.send(\n      formatLastPugStatus(\n        { pug: updatedPug.pug, guildName: channel.guild.name },\n        which,\n        found.timestamp,\n        { winner: winningTeam, updated: true }\n      )\n    );\n  } catch (error) {\n    console.log(error);\n    message.channel.send('Something went wrong');\n  }\n};\n\nexport const getTop10 = async ({ channel }, [gameTypeArg], serverId, _) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        } <#${pugChannel}>`\n      );\n\n    if (!gameTypeArg)\n      return channel.send('Invalid! specify the gametype aswell');\n\n    const gameType = gameTypes.find(g => g.name === gameTypeArg.toLowerCase());\n    if (!gameType)\n      return channel.send(\n        `**${gameTypeArg.toUpperCase()}** is not a registered gametype`\n      );\n\n    const allPlayers = await Users.find(\n      { server_id: serverId },\n      { username: 1, stats: 1 }\n    );\n\n    const gameTypeName = gameTypeArg.toLowerCase();\n    const top10 = allPlayers\n      .map(({ username, stats }) => {\n        if (!stats || !stats[gameTypeName]) return undefined;\n\n        const { won, lost, totalRating } = stats[gameTypeName];\n        if (won < 5) return undefined; // must have atleast 5 games to be considered\n\n        const winP = won / (won + lost);\n        const points =\n          100 - 0.6 * winP + totalRating * 0.4 * gameType.noOfPlayers;\n\n        if (isNaN(points)) return undefined;\n\n        return {\n          username,\n          points,\n          stats: stats[gameTypeName],\n        };\n      })\n      .filter(Boolean)\n      .sort((a, b) => a.points - b.points)\n      .slice(0, 10);\n\n    Jimp.read('assets/top10_template.png').then(async template => {\n      const { arialFNT, ubuntuFNT, ubuntuTTF } = await FONTS;\n      let Y = 50;\n      const MAX_HEIGHT = 25;\n\n      top10.forEach(player => {\n        const {\n          username,\n          stats: { totalPugs, totalRating, won, lost },\n        } = player;\n        const winP = `${((won / (won + lost)) * 100).toFixed(0)}%`;\n        const name = username.replace(/\\\\[^\\\\]/g, '');\n\n        const shouldUseUbuntu = name\n          .split('')\n          .every((_, i) => ubuntuTTF.hasGlyphForCodePoint(name.codePointAt(i)));\n\n        template.print(\n          shouldUseUbuntu ? ubuntuFNT : arialFNT,\n          30,\n          Y,\n          {\n            text: name,\n            alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n            alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE,\n          },\n          120,\n          MAX_HEIGHT\n        );\n\n        template.print(\n          ubuntuFNT,\n          150,\n          Y,\n          {\n            text: totalPugs.toString(),\n            alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n            alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE,\n          },\n          50,\n          MAX_HEIGHT\n        );\n\n        template.print(\n          ubuntuFNT,\n          200,\n          Y,\n          {\n            text: totalRating.toFixed(2),\n            alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n            alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE,\n          },\n          50,\n          MAX_HEIGHT\n        );\n        template.print(\n          ubuntuFNT,\n          250,\n          Y,\n          {\n            text: won.toString(),\n            alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n            alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE,\n          },\n          50,\n          MAX_HEIGHT\n        );\n        template.print(\n          ubuntuFNT,\n          300,\n          Y,\n          {\n            text: lost.toString(),\n            alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n            alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE,\n          },\n          50,\n          MAX_HEIGHT\n        );\n        template.print(\n          ubuntuFNT,\n          350,\n          Y,\n          {\n            text: winP,\n            alignmentX: Jimp.HORIZONTAL_ALIGN_CENTER,\n            alignmentY: Jimp.VERTICAL_ALIGN_MIDDLE,\n          },\n          50,\n          MAX_HEIGHT\n        );\n        Y += 25;\n      });\n\n      const imageName = Date.now();\n      template.write(`generated/${imageName}.png`);\n\n      await channel.send('', {\n        files: [`generated/${imageName}.png`],\n      });\n\n      try {\n        fs.unlinkSync(`generated/${imageName}.png`);\n      } catch (error) {\n        console.log('unlink error: ', error);\n      }\n    });\n  } catch (error) {\n    console.log(error);\n    channel.send('Something went wrong');\n  }\n};\n"],"file":"pugHandlers.js"}