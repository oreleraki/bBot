{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["Pug","name","noOfPlayers","noOfTeams","pickingOrder","turn","picking","players","captains","timer","user","findPlayer","push","team","captain","pick","tag","rating","length","fillPug","setTimeout","present","reduce","acc","_","i","captainTimeout","find","u","id","cleanup","addGameType","serverId","channel","gameName","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","toLowerCase","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","filter","listGameTypes","__","pugChannel","list","tempList","map","maxPlayers","gamesList","curr","existingPug","p","guild","joinGameTypes","args","username","isPartOfFilledPug","toUpperCase","results","a","game","gameType","joined","pug","addPlayer","activeCount"],"mappings":"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","sourcesContent":["import store from '../store';\nimport { GameTypes } from '../models';\nimport { computePickingOrder, hasPrivilegedRole } from '../utils';\nimport { privilegedRoles, captainTimeout } from '../constants';\nimport { formatListGameTypes } from '../formats';\nimport { assignGameTypes } from '../store/actions';\n\nclass Pug {\n  constructor({ name, noOfPlayers, noOfTeams, pickingOrder }) {\n    this.name = name;\n    this.noOfPlayers = noOfPlayers;\n    this.noOfTeams = noOfTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.players = [];\n    this.captains = [];\n    this.timer = null;\n  }\n\n  // 0 if couldn't join, 1 if joined, 2 if already in\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.findPlayer(user)) return 2;\n      this.players.push({\n        team: null,\n        captain: null,\n        pick: null,\n        tag: null,\n        rating: null,\n        ...user,\n      });\n      this.players.length === this.noOfPlayers ? this.fillPug() : null;\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(user) {}\n\n  fillPug() {\n    this.picking = true;\n    this.timer = setTimeout(() => {\n      const present = this.captains.reduce((acc, _, i) => {\n        this.captains[i] ? (acc[i] = true) : null;\n        return acc;\n      }, {});\n\n      for (let i = 0; i < this.noOfTeams; i++) {\n        if (present[i]) continue;\n      }\n    }, captainTimeout);\n  }\n\n  findPlayer(user) {\n    return this.players.find(u => u.id === user.id);\n  }\n\n  stopPug() {\n    this.cleanup();\n  }\n\n  cleanup() {\n    //  TODO\n  }\n}\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    if (!pickingOrder)\n      return channel.send(\n        'Invalid No. of players/teams. Picking order cannot be computed'\n      );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...game_types, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const tempList = gameTypes.map(g => {\n      return {\n        name: g.name,\n        players: 0,\n        maxPlayers: g.noOfPlayers,\n      };\n    });\n\n    const gamesList = tempList.reduce((acc, curr) => {\n      const existingPug = list.find(p => p.name === curr.name);\n      if (existingPug) {\n        acc.push({\n          name: existingPug.name,\n          maxPlayers: existingPug.noOfPlayers,\n          players: existingPug.players.length,\n        });\n      } else {\n        acc.push(curr);\n      }\n    }, []);\n\n    channel.send(formatListGameTypes(channel.guild.name, gamesList));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  const state = store.getState();\n  const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n  if (pugChannel !== channel.id)\n    return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n  // TODO args length 0 (default join with .j)\n\n  if (!id) return channel.send('No user was mentioned');\n\n  const isPartOfFilledPug = list.find(\n    p => p.picking && p.players.some(u => u.id === id)\n  );\n\n  if (isPartOfFilledPug)\n    return channel.send(\n      `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n    );\n\n  const user = { id, username, roles };\n  const results = args.map(a => {\n    const game = a.toLowerCase();\n    const gameType = gameTypes.some(g => g.name === game);\n\n    if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n    const pug = list.find(p => p.name === game) || new Pug(gameType);\n    const joined = pug.addPlayer(user);\n    return {\n      user,\n      joined,\n      name: game,\n      activeCount: pug.players.length,\n      maxPlayers: pug.noOfPlayers,\n    };\n  });\n};\n"],"file":"pugHandlers.js"}