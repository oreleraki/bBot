{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["Pug","name","noOfPlayers","noOfTeams","pickingOrder","turn","picking","players","captains","timer","user","findPlayer","push","team","captain","pick","tag","rating","length","fillPug","setTimeout","remaining","playersWithoutCaptain","filter","p","poolForCaptains","slice","sort","a","b","captainTimeout","find","u","id","cleanup","addGameType","serverId","channel","gameName","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","toLowerCase","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","listGameTypes","_","__","pugChannel","list","tempList","map","maxPlayers","gamesList","reduce","acc","curr","existingPug","guild","joinGameTypes","args","username","isPartOfFilledPug","toUpperCase","statuses","game","gameType","joined","pug","addPlayer","newPug","activeCount","leaveGameTypes"],"mappings":"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","sourcesContent":["import store from '../store';\nimport { GameTypes } from '../models';\nimport { computePickingOrder, hasPrivilegedRole, shuffle } from '../utils';\nimport { privilegedRoles, captainTimeout } from '../constants';\nimport { formatListGameTypes, formatJoinStatus } from '../formats';\nimport { assignGameTypes, addNewPug } from '../store/actions';\n\nclass Pug {\n  constructor({ name, noOfPlayers, noOfTeams, pickingOrder }) {\n    this.name = name;\n    this.noOfPlayers = noOfPlayers;\n    this.noOfTeams = noOfTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.players = [];\n    this.captains = [];\n    this.timer = null;\n  }\n\n  // 0 if couldn't join, 1 if joined, 2 if already in\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.findPlayer(user)) return 2;\n      this.players.push({\n        team: null,\n        captain: null,\n        pick: null,\n        tag: null,\n        rating: 0,\n        ...user,\n      });\n      this.players.length === this.noOfPlayers ? this.fillPug() : null;\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(user) {}\n\n  fillPug() {\n    this.picking = true;\n    this.timer = setTimeout(() => {\n      const remaining = this.noOfPlayers - this.captains.length;\n      const playersWithoutCaptain = this.noOfPlayers.filter(\n        p => p.captain === null\n      );\n      const poolForCaptains = shuffle(playersWithoutCaptain)\n        .slice(0, remaining * 0.8)\n        .sort((a, b) => a.rating - b.rating);\n\n      //  TODO\n    }, captainTimeout);\n  }\n\n  findPlayer(user) {\n    return this.players.find(u => u.id === user.id);\n  }\n\n  stopPug() {\n    this.cleanup();\n  }\n\n  cleanup() {\n    //  TODO\n  }\n}\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    if (!pickingOrder)\n      return channel.send(\n        'Invalid No. of players/teams. Picking order cannot be computed'\n      );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...game_types, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const tempList = gameTypes.map(g => {\n      return {\n        name: g.name,\n        players: 0,\n        maxPlayers: g.noOfPlayers,\n      };\n    });\n\n    const gamesList = tempList.reduce((acc, curr) => {\n      const existingPug = list.find(p => p.name === curr.name);\n      if (existingPug) {\n        acc.push({\n          name: existingPug.name,\n          maxPlayers: existingPug.noOfPlayers,\n          players: existingPug.players.length,\n        });\n      } else {\n        acc.push(curr);\n      }\n      return acc;\n    }, []);\n\n    channel.send(formatListGameTypes(channel.guild.name, gamesList));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    // TODO args length 0 (default join with .j)\n\n    if (!id) return channel.send('No user was mentioned');\n\n    const isPartOfFilledPug = list.find(\n      p => p.picking && p.players.some(u => u.id === id)\n    );\n\n    if (isPartOfFilledPug)\n      return channel.send(\n        `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n      );\n\n    const user = { id, username, roles };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n      const existingPug = list.find(p => p.name === game);\n      const pug = existingPug || new Pug(gameType);\n      const joined = pug.addPlayer(user);\n      if (!existingPug && joined) {\n        store.dispatch(addNewPug({ serverId, newPug: pug }));\n      }\n      return {\n        user,\n        joined,\n        name: game,\n        activeCount: pug.players.length,\n        maxPlayers: pug.noOfPlayers,\n      };\n    });\n    channel.send(formatJoinStatus(statuses));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    if (!id) return channel.send('No user was mentioned');\n\n    const isPartOfFilledPug = list.find(\n      p => p.picking && p.players.some(u => u.id === id)\n    );\n\n    if (isPartOfFilledPug)\n      return channel.send(\n        `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n      );\n\n    const user = { id, username, roles };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n      const existingPug = list.find(p => p.name === game);\n      const pug = existingPug || new Pug(gameType);\n      const joined = pug.addPlayer(user);\n      if (!existingPug && joined) {\n        store.dispatch(addNewPug({ serverId, newPug: pug }));\n      }\n      return {\n        user,\n        joined,\n        name: game,\n        activeCount: pug.players.length,\n        maxPlayers: pug.noOfPlayers,\n      };\n    });\n    channel.send(formatJoinStatus(statuses));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n"],"file":"pugHandlers.js"}