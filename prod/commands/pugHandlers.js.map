{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["Pug","name","noOfPlayers","noOfTeams","pickingOrder","turn","picking","players","captains","timer","user","findPlayer","push","team","captain","pick","tag","rating","length","fillPug","playerIndex","findIndex","p","id","splice","stopPug","setTimeout","remaining","playersWithoutCaptain","filter","poolForCaptains","slice","sort","a","b","captainTimeout","cleanup","find","u","forEach","clearTimeout","addGameType","serverId","channel","gameName","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","toLowerCase","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","listGameTypes","_","__","pugChannel","list","tempList","map","maxPlayers","gamesList","reduce","acc","curr","existingPug","guild","listAllCurrentGameTypes","joinGameTypes","args","username","isPartOfFilledPug","toUpperCase","toBroadcast","statuses","game","gameType","joined","pug","hasFilledBeforeJoining","addPlayer","hasFilledAfterJoining","newPug","activeCount","Boolean","allLeaveMsgs","op","allPugLeaveMsgs","prev","player","msg","leaveGameTypes","isOffline","returnStatus","left","isInPug","removePlayer","deadPugs","isEmpty","leaveStatus","formatDeadPugs","leaveAllGameTypes","message","hasGoneOffline","offline","listToLeave"],"mappings":"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","sourcesContent":["import store from '../store';\nimport { GameTypes } from '../models';\nimport { computePickingOrder, hasPrivilegedRole, shuffle } from '../utils';\nimport { privilegedRoles, captainTimeout, offline } from '../constants';\nimport {\n  formatListGameTypes,\n  formatJoinStatus,\n  formatLeaveStatus,\n  formatBroadcastPug,\n  formatListAllCurrentGameTypes,\n} from '../formats';\nimport { assignGameTypes, addNewPug, removePug } from '../store/actions';\n\nclass Pug {\n  constructor({ name, noOfPlayers, noOfTeams, pickingOrder }) {\n    this.name = name;\n    this.noOfPlayers = noOfPlayers;\n    this.noOfTeams = noOfTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.players = [];\n    this.captains = [];\n    this.timer = null;\n  }\n\n  // 0 if couldn't join, 1 if joined, 2 if already in\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.findPlayer(user)) return 2;\n      this.players.push({\n        team: null,\n        captain: null,\n        pick: null,\n        tag: null,\n        rating: 0,\n        ...user,\n      });\n      this.players.length === this.noOfPlayers ? this.fillPug() : null;\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(user) {\n    const playerIndex = this.players.findIndex(p => p.id === user.id);\n    this.players.splice(playerIndex, 1);\n    if (this.picking) this.stopPug();\n  }\n\n  fillPug() {\n    this.picking = true;\n    this.timer = setTimeout(() => {\n      const remaining = this.noOfPlayers - this.captains.length;\n      const playersWithoutCaptain = this.noOfPlayers.filter(\n        p => p.captain === null\n      );\n      const poolForCaptains = shuffle(playersWithoutCaptain)\n        .slice(0, remaining * 0.8)\n        .sort((a, b) => a.rating - b.rating);\n\n      //  TODO\n    }, captainTimeout);\n  }\n\n  stopPug() {\n    this.cleanup();\n  }\n\n  findPlayer(user) {\n    return this.players.find(u => u.id === user.id);\n  }\n\n  isEmpty() {\n    return this.players.length === 0 ? true : false;\n  }\n\n  cleanup() {\n    //  TODO\n    this.picking = false;\n    this.turn = 0;\n    this.captains = [];\n    this.players.forEach(user => (user.captain = user.team = user.pick = null));\n    clearTimeout(this.timer);\n  }\n}\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    if (!pickingOrder)\n      return channel.send(\n        'Invalid No. of players/teams. Picking order cannot be computed'\n      );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...game_types, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    const tempList = gameTypes.map(g => {\n      return {\n        name: g.name,\n        players: 0,\n        maxPlayers: g.noOfPlayers,\n      };\n    });\n\n    const gamesList = tempList.reduce((acc, curr) => {\n      const existingPug = list.find(p => p.name === curr.name);\n      if (existingPug) {\n        acc.push({\n          name: existingPug.name,\n          maxPlayers: existingPug.noOfPlayers,\n          players: existingPug.players.length,\n        });\n      } else {\n        acc.push(curr);\n      }\n      return acc;\n    }, []);\n\n    channel.send(formatListGameTypes(channel.guild.name, gamesList));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listAllCurrentGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    channel.send(formatListAllCurrentGameTypes(list, channel.guild.name));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    // TODO args length 0 (default join with .j)\n\n    if (!id) return channel.send('No user was mentioned');\n\n    const isPartOfFilledPug = list.find(\n      p => p.picking && p.players.some(u => u.id === id)\n    );\n\n    if (isPartOfFilledPug)\n      return channel.send(\n        `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n      );\n\n    let toBroadcast = null;\n    const user = { id, username, roles };\n    const statuses = args.map(a => {\n      if (!toBroadcast) {\n        const game = a.toLowerCase();\n        const gameType = gameTypes.find(g => g.name === game);\n\n        if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n        const existingPug = list.find(p => p.name === game);\n        const pug = existingPug || new Pug(gameType);\n\n        const hasFilledBeforeJoining = pug.picking;\n        const joined = pug.addPlayer(user);\n        const hasFilledAfterJoining = pug.picking;\n\n        if (!hasFilledBeforeJoining && hasFilledAfterJoining) {\n          toBroadcast = pug;\n        }\n\n        if (!existingPug && joined) {\n          store.dispatch(addNewPug({ serverId, newPug: pug }));\n        }\n\n        return {\n          user,\n          joined,\n          name: game,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n    });\n    channel.send(formatJoinStatus(statuses.filter(Boolean)));\n    if (toBroadcast) {\n      const allLeaveMsgs = list.reduce((acc, op) => {\n        if (op.name !== toBroadcast.name) {\n          const allPugLeaveMsgs = toBroadcast.players.reduce((prev, player) => {\n            if (op.findPlayer(player)) {\n              const msg = leaveGameTypes(\n                { channel },\n                [op.name],\n                serverId,\n                user,\n                null,\n                true\n              );\n              prev += `${msg} `;\n            }\n            return prev;\n          }, ``);\n          acc += `${allPugLeaveMsgs} \\n`;\n        }\n        return acc;\n      }, ``);\n      allLeaveMsgs && channel.send(allLeaveMsgs);\n      channel.send(formatBroadcastPug(toBroadcast));\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles },\n  isOffline,\n  returnStatus\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(`Active channel for pugs is <#${pugChannel}>`);\n\n    if (!id) return channel.send('No user was mentioned');\n    if (args.length === 0)\n      return channel.send('Invalid, No pugs were mentioned');\n\n    const user = { id, username, roles };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, left: -1 }; // -1 is for NOT FOUND\n\n      const pug = list.find(p => p.name === game);\n      const isInPug = pug.findPlayer(user);\n      if (isInPug) {\n        pug.removePlayer(user);\n        return {\n          user,\n          pug,\n          name: game,\n          left: 1,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n      return { user, name: game, left: 0 };\n    });\n    // TODO Compute deadpugs\n    const deadPugs = statuses.reduce(\n      (acc, { user, pug, name, activeCount, maxPlayers }) => {\n        if (activeCount === maxPlayers - 1) {\n          acc.push({ pug, user });\n        }\n        if (pug.isEmpty()) {\n          store.dispatch(removePug({ serverId, name }));\n        }\n        return acc;\n      },\n      []\n    );\n\n    const leaveStatus = formatLeaveStatus(statuses, isOffline);\n    if (returnStatus) return leaveStatus;\n\n    channel.send(leaveStatus);\n    deadPugs.length > 0 ? channel.send(formatDeadPugs(deadPugs)) : null;\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveAllGameTypes = async (message, args, serverId, user) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== message.channel.id)\n      return message.channel.send(\n        `Active channel for pugs is <#${pugChannel}>`\n      );\n\n    const hasGoneOffline = args[0] === offline;\n    const listToLeave = list.reduce((acc, pug) => {\n      const isInPug = pug.findPlayer(user);\n      if (isInPug) {\n        acc.push(pug.name);\n      }\n      return acc;\n    }, []);\n    leaveGameTypes(message, listToLeave, serverId, user, hasGoneOffline);\n  } catch (error) {\n    message.channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n"],"file":"pugHandlers.js"}