{"version":3,"sources":["../../src/commands/pugHandlers.js"],"names":["pugEventEmitter","events","EventEmitter","Pug","name","noOfPlayers","noOfTeams","pickingOrder","turn","picking","players","captains","timer","user","findPlayer","push","team","captain","pick","tag","rating","stats","totalRating","playerIndex","findIndex","p","id","splice","stopPug","serverId","setTimeout","remaining","length","playersWithoutCaptain","filter","poolForCaptains","slice","sort","a","b","leastDiff","pair","i","left","diff","Math","abs","right","smallest","min","firstCaptain","secondCaptain","fillCaptainSpot","find","u","otherCaptainIndex","otherCaptain","otherCaptainTeam","pIndex","didFillSpot","emit","pugEvents","captainsReady","captainTimeout","teamIndex","areCaptainsDecided","clearTimeout","captainsDecided","pickedPlayers","player","lastPlayerIndex","lastPlayerTeam","finished","fillPug","cleanup","Boolean","forEach","addGameType","channel","gameName","roles","privilegedRoles","isNaN","send","state","store","getState","gameTypes","pugs","some","g","toLowerCase","parseInt","newGameType","GameTypes","findOneAndUpdate","server_id","$push","game_types","exec","dispatch","console","log","delGameType","rest","updatedGameTypes","listGameTypes","_","__","pugChannel","list","tempList","map","maxPlayers","gamesList","reduce","acc","curr","existingPug","guild","listAllCurrentGameTypes","joinGameTypes","args","username","isInvisible","isPartOfFilledPug","toUpperCase","Users","findOne","db_user","toBroadcast","statuses","game","gameType","joined","pug","hasFilledBeforeJoining","addPlayer","hasFilledAfterJoining","newPug","activeCount","allLeaveMsgs","op","allPugLeaveMsgs","j","leaveGameTypes","msg","isOffline","returnStatus","isInPug","removePlayer","deadPugs","isEmpty","leaveStatus","leaveAllGameTypes","message","hasGoneOffline","offline","listToLeave","addCaptain","forWhichPug","isCandidate","result","pickPlayer","index","alreadyPicked","Pugs","timestamp","Date","save","updatedStats","existingStats","totalCaptain","totalPugs","$set","last_pug","upsert","pugPicking","pugsInPicking","promoteAvailablePugs","hasPugMentioned","checkLastPugs","action","howMany","split","pugArg","results","limit","found","guildName","resetPug","pugName","decidePromoteOrPick","includes","adminAddPlayer","mentionedUser","adminRemovePlayer","adminPickPlayer"],"mappings":"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","sourcesContent":["import store from '../store';\nimport { GameTypes, Pugs, Users } from '../models';\nimport {\n  computePickingOrder,\n  hasPrivilegedRole,\n  shuffle,\n  getRandomInt,\n} from '../utils';\nimport {\n  privilegedRoles,\n  captainTimeout,\n  offline,\n  pugEvents,\n} from '../constants';\nimport {\n  formatListGameTypes,\n  formatJoinStatus,\n  formatLeaveStatus,\n  formatBroadcastPug,\n  formatListAllCurrentGameTypes,\n  formatAddCaptainStatus,\n  formatPugsInPicking,\n  formatDeadPugs,\n  formatPickPlayerStatus,\n  formatPromoteAvailablePugs,\n  formatLastPugStatus,\n} from '../formats';\nimport { assignGameTypes, addNewPug, removePug } from '../store/actions';\nimport events from 'events';\n\nexport const pugEventEmitter = new events.EventEmitter();\n\nclass Pug {\n  constructor({ name, noOfPlayers, noOfTeams, pickingOrder }) {\n    this.name = name;\n    this.noOfPlayers = noOfPlayers;\n    this.noOfTeams = noOfTeams;\n    this.pickingOrder = pickingOrder;\n    this.turn = 0;\n    this.picking = false;\n    this.players = [];\n    this.captains = [];\n    this.timer = null;\n  }\n\n  // 0 if couldn't join, 1 if joined, 2 if already in\n  addPlayer(user) {\n    if (!this.picking) {\n      if (this.findPlayer(user)) return 2;\n      this.players.push({\n        team: null,\n        captain: null,\n        pick: null,\n        tag: null,\n        rating: user.stats[this.name] ? user.stats[this.name].totalRating : 0,\n        ...user,\n      });\n      return 1;\n    }\n    return 0;\n  }\n\n  removePlayer(user) {\n    const playerIndex = this.players.findIndex(p => p.id === user.id);\n    this.players.splice(playerIndex, 1);\n    if (this.picking) this.stopPug();\n  }\n\n  fillPug(serverId) {\n    this.picking = true;\n    this.timer = setTimeout(() => {\n      const remaining = this.noOfPlayers - this.captains.length;\n      const playersWithoutCaptain = this.players.filter(\n        p => p.captain === null\n      );\n      const poolForCaptains = shuffle(playersWithoutCaptain)\n        .slice(0, remaining * 0.8)\n        .sort((a, b) => a.rating - b.rating);\n\n      if (this.noOfTeams === 2) {\n        if (this.captains.length === 0) {\n          let leastDiff = 0;\n          let pair = [0, 1];\n          for (let i = 1; i < poolForCaptains.length - 1; i++) {\n            const left = {\n              pair: [i, i - 1],\n              diff: Math.abs(\n                poolForCaptains[i].rating - poolForCaptains[i - 1].rating\n              ),\n            };\n            const right = {\n              pair: [i, i + 1],\n              diff: Math.abs(\n                poolForCaptains[i].rating - poolForCaptains[i + 1].rating\n              ),\n            };\n\n            const smallest = Math.min(left.diff, right.diff);\n            if (smallest === left.diff && smallest <= leastDiff) {\n              leastDiff = left.diff;\n              pair = left.pair;\n            } else if (smallest === right.diff && smallest <= leastDiff) {\n              leastDiff = right.diff;\n              pair = right.pair;\n            }\n          }\n          const firstCaptain = poolForCaptains[pair[0]];\n          const secondCaptain = poolForCaptains[pair[1]];\n\n          this.fillCaptainSpot(\n            firstCaptain,\n            firstCaptain.rating >= secondCaptain.rating ? 0 : 1\n          );\n          this.fillCaptainSpot(\n            secondCaptain,\n            firstCaptain.rating >= secondCaptain.rating ? 1 : 0\n          );\n        } else {\n          // 1 capt already there\n          const firstCaptain = this.players.find(u => u.captain !== null);\n          let leastDiff = 10000;\n          let otherCaptainIndex = null;\n          for (let i = 0; i < poolForCaptains.length; i++) {\n            const diff = Math.abs(\n              firstCaptain.rating - poolForCaptains[i].rating\n            );\n            if (diff <= leastDiff) {\n              leastDiff = diff;\n              otherCaptainIndex = i;\n            }\n          }\n\n          const otherCaptain = poolForCaptains[otherCaptainIndex];\n          const otherCaptainTeam = Math.abs((firstCaptain.team % 2) - 1);\n          this.fillCaptainSpot(otherCaptain, otherCaptainTeam);\n        }\n      } else {\n        // more than 2 capts\n        for (let i = 0; i < this.noOfTeams; i++) {\n          if (this.captains[i]) continue;\n          while (1) {\n            const pIndex = getRandomInt(0, poolForCaptains.length - 1);\n            const didFillSpot = this.fillCaptainSpot(\n              poolForCaptains[pIndex],\n              i\n            );\n            if (didFillSpot) break;\n          }\n        }\n      }\n\n      pugEventEmitter.emit(pugEvents.captainsReady, serverId, this.name);\n      //  TODO\n    }, captainTimeout);\n  }\n\n  addCaptain(user) {\n    let teamIndex;\n    while (1) {\n      teamIndex = getRandomInt(0, this.noOfTeams - 1);\n      const didFillSpot = this.fillCaptainSpot(user, teamIndex);\n      if (didFillSpot) break;\n    }\n\n    if (this.areCaptainsDecided()) clearTimeout(this.timer);\n    return {\n      team: teamIndex,\n      captainsDecided: this.areCaptainsDecided(),\n    };\n  }\n\n  fillCaptainSpot(user, teamIndex) {\n    const pIndex = this.players.findIndex(u => u.id === user.id);\n    if (this.players[pIndex].captain === null && !this.captains[teamIndex]) {\n      this.players[pIndex].captain = this.players[pIndex].team = teamIndex;\n      this.players[pIndex].pick = 0;\n      this.captains[teamIndex] = this.players[pIndex];\n      return true;\n    }\n    return false;\n  }\n\n  pickPlayer(playerIndex, team) {\n    if (this.players[playerIndex].team === null) {\n      this.players[playerIndex].team = team;\n      this.turn += 1;\n      this.players[playerIndex].pick = this.turn;\n\n      let pickedPlayers = [{ player: this.players[playerIndex], team }];\n      // last pick automatically goes\n      if (this.turn === this.pickingOrder.length - 1) {\n        const lastPlayerIndex = this.players.findIndex(u => u.team === null);\n        const lastPlayerTeam = this.pickingOrder[this.turn];\n\n        this.players[lastPlayerIndex].team = lastPlayerTeam;\n        this.turn += 1;\n        this.players[lastPlayerIndex].pick = this.turn;\n        // pug ends\n        this.picking = false;\n        pickedPlayers.push({\n          player: this.players[lastPlayerIndex],\n          team: lastPlayerTeam,\n        });\n        return {\n          pickedPlayers,\n          finished: true,\n        };\n      }\n      return {\n        pickedPlayers,\n        finished: false,\n      };\n    }\n  }\n\n  resetPug() {\n    this.stopPug();\n    this.fillPug();\n  }\n\n  stopPug() {\n    this.cleanup();\n  }\n\n  findPlayer(user) {\n    return this.players.find(u => u.id === user.id);\n  }\n\n  isEmpty() {\n    return this.players.length === 0 ? true : false;\n  }\n\n  areCaptainsDecided() {\n    return this.captains.filter(Boolean).length === this.noOfTeams;\n  }\n\n  cleanup() {\n    //  TODO\n    this.picking = false;\n    this.turn = 0;\n    this.captains = [];\n    this.players.forEach(user => (user.captain = user.team = user.pick = null));\n    clearTimeout(this.timer);\n  }\n}\n\nexport const addGameType = async (\n  { channel },\n  [gameName, noOfPlayers, noOfTeams],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (isNaN(noOfPlayers) || isNaN(noOfTeams) || !gameName)\n      return channel.send('Invalid command');\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send('Gametype already exists');\n\n    const pickingOrder = computePickingOrder(\n      parseInt(noOfPlayers),\n      parseInt(noOfTeams)\n    );\n\n    if (!pickingOrder)\n      return channel.send(\n        'Invalid No. of players/teams. Picking order cannot be computed'\n      );\n\n    const newGameType = {\n      name: gameName.toLowerCase(),\n      pickingOrder,\n      noOfPlayers: parseInt(noOfPlayers),\n      noOfTeams: parseInt(noOfTeams),\n    };\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { $push: { game_types: newGameType } }\n    ).exec();\n    store.dispatch(\n      assignGameTypes({ serverId, gameTypes: [...gameTypes, newGameType] })\n    );\n\n    channel.send(`**${gameName}** has been added`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const delGameType = async (\n  { channel },\n  [gameName, ...rest],\n  serverId,\n  { roles }\n) => {\n  try {\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n    const state = store.getState();\n    const { gameTypes } = state.pugs[serverId];\n\n    if (!gameTypes.some(g => g.name === gameName.toLowerCase()))\n      return channel.send(\"Gametype doesn't exist\");\n\n    const updatedGameTypes = gameTypes.filter(\n      g => g.name !== gameName.toLowerCase()\n    );\n\n    await GameTypes.findOneAndUpdate(\n      { server_id: serverId },\n      { game_types: updatedGameTypes }\n    ).exec();\n    store.dispatch(assignGameTypes({ serverId, gameTypes: updatedGameTypes }));\n\n    channel.send(`**${gameName}** has been removed`);\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, gameTypes, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : `not present`\n        }`\n      );\n\n    const tempList = gameTypes.map(g => {\n      return {\n        name: g.name,\n        players: 0,\n        maxPlayers: g.noOfPlayers,\n      };\n    });\n\n    const gamesList = tempList.reduce((acc, curr) => {\n      const existingPug = list.find(p => p.name === curr.name);\n      if (existingPug) {\n        acc.push({\n          name: existingPug.name,\n          maxPlayers: existingPug.noOfPlayers,\n          players: existingPug.players.length,\n        });\n      } else {\n        acc.push(curr);\n      }\n      return acc;\n    }, []);\n\n    channel.send(formatListGameTypes(channel.guild.name, gamesList));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const listAllCurrentGameTypes = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    channel.send(formatListAllCurrentGameTypes(list, channel.guild.name));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const joinGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles, isInvisible }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    // TODO args length 0 (default join with .j)\n    if (isInvisible)\n      return channel.send(`Cannot use this command while invisible`);\n\n    if (!id) return channel.send('No user was mentioned');\n\n    const isPartOfFilledPug = list.find(\n      p => p.picking && p.players.some(u => u.id === id)\n    );\n\n    if (isPartOfFilledPug)\n      return channel.send(\n        `Please leave **${isPartOfFilledPug.name.toUpperCase()}** first to join other pugs`\n      );\n\n    const db_user = await Users.findOne({ server_id: serverId, id: id }).exec();\n\n    let toBroadcast = null;\n    const user = { id, username, stats: db_user ? db_user.stats : {} };\n    const statuses = args.map(a => {\n      if (!toBroadcast) {\n        const game = a.toLowerCase();\n        const gameType = gameTypes.find(g => g.name === game);\n\n        if (!gameType) return { user, name: game, joined: -1 }; // -1 is for NOT FOUND\n\n        const existingPug = list.find(p => p.name === game);\n        const pug = existingPug || new Pug(gameType);\n\n        const hasFilledBeforeJoining = pug.picking;\n        const joined = pug.addPlayer(user);\n        pug.players.length === pug.noOfPlayers ? pug.fillPug(serverId) : null;\n        const hasFilledAfterJoining = pug.picking;\n\n        if (!hasFilledBeforeJoining && hasFilledAfterJoining) {\n          toBroadcast = pug;\n        }\n\n        if (!existingPug && joined) {\n          store.dispatch(addNewPug({ serverId, newPug: pug }));\n        }\n\n        return {\n          user,\n          joined,\n          name: game,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n    });\n    channel.send(formatJoinStatus(statuses.filter(Boolean)));\n    if (toBroadcast) {\n      let allLeaveMsgs = ``;\n      for (let i = 0; i < list.length; i++) {\n        const op = list[i];\n        if (op.name !== toBroadcast.name) {\n          let allPugLeaveMsgs = ``;\n          for (let j = 0; j < toBroadcast.players.length; j++) {\n            const player = toBroadcast.players[j];\n            if (op.findPlayer(player)) {\n              const msg = await leaveGameTypes(\n                { channel },\n                [op.name],\n                serverId,\n                player,\n                null,\n                true\n              );\n              allPugLeaveMsgs += `${msg} `;\n            }\n          }\n          allLeaveMsgs += `${allPugLeaveMsgs} \\n`;\n        }\n      }\n\n      allLeaveMsgs && channel.send(allLeaveMsgs);\n      channel.send(formatBroadcastPug(toBroadcast));\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveGameTypes = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles },\n  isOffline,\n  returnStatus\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    if (!id) return channel.send('No user was mentioned');\n    if (args.length === 0)\n      return channel.send('Invalid, No pugs were mentioned');\n\n    const user = { id, username };\n    const statuses = args.map(a => {\n      const game = a.toLowerCase();\n      const gameType = gameTypes.find(g => g.name === game);\n\n      if (!gameType) return { user, name: game, left: -1 }; // -1 is for NOT FOUND\n\n      const pug = list.find(p => p.name === game);\n      const isInPug = pug && pug.findPlayer(user);\n      if (isInPug) {\n        pug.removePlayer(user);\n        return {\n          user,\n          pug,\n          name: game,\n          left: 1,\n          activeCount: pug.players.length,\n          maxPlayers: pug.noOfPlayers,\n        };\n      }\n      return { user, name: game, left: 0 };\n    });\n    // TODO Compute deadpugs\n    const deadPugs = statuses.reduce(\n      (acc, { user, pug, name, activeCount, maxPlayers }) => {\n        if (activeCount === maxPlayers - 1) {\n          acc.push({ pug, user });\n        }\n        if (pug && pug.isEmpty()) {\n          store.dispatch(removePug({ serverId, name }));\n        }\n        return acc;\n      },\n      []\n    );\n\n    const leaveStatus = formatLeaveStatus(statuses, isOffline);\n    if (returnStatus) return leaveStatus;\n\n    channel.send(leaveStatus);\n    deadPugs.length > 0 ? channel.send(formatDeadPugs(deadPugs)) : null;\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const leaveAllGameTypes = async (message, args, serverId, user) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== message.channel.id)\n      return message.channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    const hasGoneOffline = args[0] === offline;\n    const listToLeave = list.reduce((acc, pug) => {\n      const isInPug = pug.findPlayer(user);\n      if (isInPug) {\n        acc.push(pug.name);\n      }\n      return acc;\n    }, []);\n    if (listToLeave.length === 0) {\n      return channel.send(\n        `Cannot leave pug(s) if you haven't joined any :head_bandage:`\n      );\n    }\n    leaveGameTypes(message, listToLeave, serverId, user, hasGoneOffline);\n  } catch (error) {\n    message.channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const addCaptain = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    const forWhichPug = list.find(pug => {\n      const isCandidate = pug.picking && !pug.areCaptainsDecided();\n      if (isCandidate) {\n        return pug.players.some(u => u.id === id); // check whether the guy is present there\n      }\n      return false;\n    });\n\n    if (!forWhichPug)\n      return channel.send(\n        'There was no filled pug for howMany you could captain'\n      );\n\n    if (!forWhichPug.players.some(u => u.id === id && u.captain === null))\n      return channel.send(`**${username}** is already a captain`);\n\n    const user = { id, username };\n    const result = forWhichPug.addCaptain(user);\n    channel.send(formatAddCaptainStatus(user, result));\n    // TODO Broadcast captains decided\n    if (result.captainsDecided) {\n      // emit\n      pugEventEmitter.emit(pugEvents.captainsReady, serverId, forWhichPug.name);\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const pickPlayer = async (\n  { channel },\n  [index, ...args],\n  serverId,\n  { id, username, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    const playerIndex = parseInt(index);\n    if (!playerIndex) return;\n\n    const forWhichPug = list.find(pug => {\n      if (pug.picking) {\n        return pug.players.some(u => u.id === id && u.captain !== null); // check whether the guy is present there\n      }\n      return false;\n    });\n\n    if (!forWhichPug)\n      return channel.send(\n        'Cannot pick if you are not a captain in a pug :head_bandage: '\n      );\n\n    if (!forWhichPug.areCaptainsDecided())\n      return channel.send('Please wait until all captains have been decided');\n\n    const { team } = forWhichPug.players.find(\n      u => (u.id === id) & (u.captain !== null)\n    );\n    const { pickingOrder, turn, name } = forWhichPug;\n\n    if (team !== pickingOrder[turn])\n      return channel.send('Please wait for your turn :pouting_cat: ');\n\n    if (playerIndex < 1 || playerIndex > forWhichPug.players.length)\n      return channel.send('Invalid pick');\n\n    if (forWhichPug.players[playerIndex - 1].team !== null) {\n      const alreadyPicked = forWhichPug.players[playerIndex - 1];\n      return channel.send(`${alreadyPicked.username} is already picked`);\n    }\n\n    const result = forWhichPug.pickPlayer(playerIndex - 1, pickingOrder[turn]);\n    channel.send(formatPickPlayerStatus({ ...result, pug: forWhichPug }));\n\n    // TODO If finished, save stats to DB and remove from redux\n    if (result.finished) {\n      new Pugs({\n        server_id: serverId,\n        name: forWhichPug.name,\n        pug: forWhichPug,\n        timestamp: new Date(),\n      }).save();\n\n      const players = forWhichPug.players;\n\n      players.forEach(({ id, username, pick, captain, stats }) => {\n        let updatedStats = {};\n        const existingStats = stats[forWhichPug.name];\n        if (!existingStats) {\n          updatedStats = {\n            totalRating: pick,\n            totalCaptain: captain ? 1 : 0,\n            totalPugs: 1,\n          };\n        } else {\n          updatedStats = {\n            totalRating:\n              (existingStats.totalRating + pick) /\n              (existingStats.totalPugs + 1),\n            totalCaptain: existingStats.totalCaptain + 1,\n            totalPugs: existingStats.totalPugs + 1,\n          };\n        }\n\n        Users.findOneAndUpdate(\n          { id, server_id: serverId },\n          {\n            $set: {\n              username,\n              last_pug: forWhichPug,\n              stats: { ...stats, [forWhichPug.name]: updatedStats },\n            },\n          },\n          {\n            upsert: true,\n          }\n        ).exec();\n      });\n\n      store.dispatch(removePug({ serverId, name }));\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const pugPicking = async ({ channel }, _, serverId, __) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    const pugsInPicking = list.filter(\n      pug => pug.picking && pug.areCaptainsDecided()\n    );\n\n    if (pugsInPicking.length === 0) {\n      return channel.send('There are no pugs in picking mode');\n    }\n\n    channel.send(formatPugsInPicking(pugsInPicking));\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const promoteAvailablePugs = async ({ channel }, args, serverId, _) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    const hasPugMentioned =\n      args[0] && list.find(p => p.name === args[0].toLowerCase());\n\n    if (hasPugMentioned && hasPugMentioned.players.length > 0)\n      return channel.send(\n        formatPromoteAvailablePugs([hasPugMentioned], channel.guild.name)\n      );\n\n    !hasPugMentioned && list.length > 0\n      ? channel.send(formatPromoteAvailablePugs(list, channel.guild.name))\n      : channel.send('There are no active pugs to promote. Try joining one!');\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const checkLastPugs = async (\n  { channel },\n  args,\n  serverId,\n  { action }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list, gameTypes } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    const howMany = action\n      .split('')\n      .reduce((acc, curr) => (acc += curr === 't' ? 1 : 0), 0);\n\n    const pugArg = args[0] && args[0].toLowerCase();\n    let results = null;\n    if (pugArg) {\n      results = await Pugs.find({ server_id: serverId, name: pugArg })\n        .sort({ timestamp: -1 })\n        .limit(howMany)\n        .exec();\n    } else {\n      results = await Pugs.find({ server_id: serverId })\n        .sort({ timestamp: -1 })\n        .limit(howMany)\n        .exec();\n    }\n\n    if (!results || results.length === 0)\n      return channel.send(\n        `No ${action} pug found ${\n          pugArg ? `for **${pugArg.toUpperCase()}**` : ``\n        }`\n      );\n\n    const [found] = results.filter((_, i) => i === howMany - 1);\n\n    found &&\n      channel.send(\n        formatLastPugStatus(\n          { pug: found.pug, guildName: channel.guild.name },\n          action,\n          found.timestamp\n        )\n      );\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const resetPug = async ({ channel }, args, serverId, { roles }) => {\n  if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n\n  const state = store.getState();\n  const { pugChannel, list } = state.pugs[serverId];\n\n  if (pugChannel !== channel.id)\n    return channel.send(\n      `Active channel for pugs is ${\n        pugChannel ? `<#${pugChannel}>` : ``\n      } <#${pugChannel}>`\n    );\n\n  const pugName = args[0].toLowerCase();\n  const forWhichPug = list.find(p => p.name === pugName);\n\n  if (!forWhichPug) return channel.send(`No Pug found: ${args[0]}`);\n  if (!forWhichPug.picking)\n    return channel.send(`${forWhichPug.name} is not in picking mode yet`);\n\n  forWhichPug.resetPug();\n  channel.send(formatBroadcastPug(forWhichPug));\n};\n\nexport const decidePromoteOrPick = async (\n  { channel },\n  args,\n  serverId,\n  { id, username, action }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel, list } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    // just p or promote\n    if (['p', 'promote'].includes(action) && !args[0])\n      return promoteAvailablePugs({ channel }, args, serverId, {\n        id,\n        username,\n      });\n\n    // p 4 or pick 7 or p siege5\n    if (['p', 'pick'].includes(action) && args[0]) {\n      // p 4 or p siege5\n      if (action === 'p') {\n        if (isNaN(args[0])) {\n          return promoteAvailablePugs({ channel }, args, serverId, {\n            id,\n            username,\n          });\n        }\n        return pickPlayer({ channel }, args, serverId, { id, username });\n      } else {\n        return pickPlayer({ channel }, args, serverId, { id, username });\n      }\n    }\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\n/**\n * A D M I N\n * C O M M A N D S\n */\n\nexport const adminAddPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    joinGameTypes({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const adminRemovePlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    leaveGameTypes({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n\nexport const adminPickPlayer = async (\n  { channel },\n  args,\n  serverId,\n  { mentionedUser, roles }\n) => {\n  try {\n    const state = store.getState();\n    const { pugChannel } = state.pugs[serverId];\n\n    if (pugChannel !== channel.id)\n      return channel.send(\n        `Active channel for pugs is ${\n          pugChannel ? `<#${pugChannel}>` : ``\n        } <#${pugChannel}>`\n      );\n\n    if (!hasPrivilegedRole(privilegedRoles, roles)) return;\n    if (!mentionedUser) return channel.send('No mentioned user');\n\n    pickPlayer({ channel }, args.slice(1), serverId, {\n      id: mentionedUser.id,\n      username: mentionedUser.username,\n    });\n  } catch (error) {\n    channel.send('Something went wrong');\n    console.log(error);\n  }\n};\n"],"file":"pugHandlers.js"}